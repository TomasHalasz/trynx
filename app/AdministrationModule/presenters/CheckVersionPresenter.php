<?php

namespace App\AdministrationModule\Presenters;

use Nette,
    App\Model;
use Nette\Utils\FileSystem;
use Nette\Application\UI\Form;
use Nette\Image;
use Exception;
use DOMDocument;
use Nette\Utils\Arrays;
use Tracy\Debugger;

/**
 * Check Version presenter.
 *
 * @author     Tomáš Halász
 * @package
 */
class CheckVersionPresenter extends SecuredPresenter
{

    private $parameters;

    /** @persistent */
    public $page;

    /** @persistent */
    public $filter;

    /** @persistent */
    public $id;

    public $newVersion = FALSE, $message, $versionDate = NULL, $md5Checksum = '';
    private $arrUpdateStatus = [];

    /**
     * @inject
     * @var \App\Model\VersionsManager
     */
    public $VersionsManager;

    /**
     * @inject
     * @var \App\Model\UsersManager
     */
    public $UsersManager;

    /**
     * @var Nette\Database\Context
     */
    private $database;


    public function __construct(\Nette\DI\Container $container, Nette\Database\Context $database)
    {

        parent::__construct();

        $this->database = $database;
        $this->parameters = $container->getParameters();

    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

    }

    public function renderDefault($page = 1)
    {

        //$this->template->article_list_cz = $this->article_list_cz;
        //paginator start
        $paginator = new Nette\Utils\Paginator;
        $ItemsOnPage = 15;
        $totalItems = $this->VersionsManager->findAllTotal()->count();

        $paginator->setItemCount($totalItems); // celkový počet položek (např. článků)
        $paginator->setItemsPerPage($ItemsOnPage); // počet položek na stránce
        $paginator->setPage($page); // číslo aktuální stránky, číslováno od 1
        $pages = ceil($totalItems / $ItemsOnPage);
        $this->template->paginator = $paginator;
        $steps = [];
        for ($i = 1; $i <= $pages; $i++) {
            $steps[] = $i;
        }
        $this->template->steps = $steps;

        $this->template->versions = $this->VersionsManager->findAllTotal()->where('downloaded = 1')->order('version_date DESC, id DESC')->limit($paginator->getLength(), $paginator->getOffset());

        $this->template->counter_total = $totalItems;
        //paginator end


        $this->template->cmzName = CMZ_NAME;
        $this->checkNewVersion($this->parameters['ic_install'], $this->parameters['app_version']);
        //dump($this->newVersion);
        $this->template->newVersion = $this->newVersion;
        $this->template->message = $this->message;
        if ($tmpNew = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch()) {
            $this->template->lastVersion = $tmpNew['version'];
            $this->template->arrUpdateStatus = json_decode($tmpNew['progress'], TRUE);
        } elseif ($tmpLast = $this->VersionsManager->findAllTotal()->limit(1)->order('id DESC')->fetch()) {
            $this->template->arrUpdateStatus = json_decode($tmpLast['progress'], TRUE);
            $this->template->lastVersion = $tmpLast['version'];
        } else {
            $this->template->arrUpdateStatus = [];
            $this->template->lastVersion = '';
        }

    }

    public function checkNewVersion($ic, $version)
    {
        // Initialize a file URL to the variable
        $url = 'https://beta.klienti.cz/api/app-version/check-last';
        // Initialize the cURL session
        $ch = curl_init($url);
        // Initialize directory name where
        // file will be save
        //$dir = './';
        //prepare folder
        $dir = __DIR__ . "/../../../upgrades/";
        if (!is_dir($dir))
            mkdir($dir);

        // Use basename() function to return
        // the base name of file
        //$file_name = basename($url);
        $file_name = 'check.txt';

        // Save file into file location
        $save_file_loc = $dir . $file_name;

        // Open file
        $fp = fopen($save_file_loc, 'wb');

        // It set an option for a cURL transfer
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_POSTFIELDS,
            "ic=$ic&version=$version");

        // Perform a cURL session
        curl_exec($ch);

        // Closes a cURL session and frees all resources
        curl_close($ch);

        // Close file
        fclose($fp);
        $str = file_get_contents($save_file_loc);
        //dump($str);
        $arrRet = json_decode($str, true);
        if ($arrRet['status'] == 'NO') {
            $this->newVersion = FALSE;
            $this->message = $arrRet['message'];
        } elseif ($arrRet['status'] == 'OK') {
            $this->newVersion = $arrRet['version'];
            $this->message = $arrRet['message'];
            $this->versionDate = $arrRet['version_date'];
            $this->md5Checksum = $arrRet['md5_checksum'];
            if (!($tmpNew = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch())) {
                $this->VersionsManager->insertForeign(['version' => $this->newVersion, 'version_date' => $this->versionDate, 'md5_checksum' => $this->md5Checksum]);
            } else {
                if ($tmpNew['downloaded'] == 1) {
                    $this->newVersion = FALSE;
                    $this->message = 'Poslední dostupnou verzi již máte staženu';
                }
            }
        }
        //dump($this->message);

    }

    private function updateProgress($key, $text, $id = NULL)
    {
        if (is_null($id)) {
            $tmpUpdate = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch();
        } else {
            $tmpUpdate = $this->VersionsManager->findAllTotal()->where('id = ?', $id)->fetch();
        }

        if ($tmpUpdate) {
            $arrProgress = json_decode($tmpUpdate['progress'], true);
            $arrProgress[$key] = $text;
            $tmpUpdate->update(['progress' => json_encode($arrProgress)]);
        }
    }

    public function handleDownload()
    {
        session_write_close();
        $this->checkNewVersion($this->parameters['ic_install'], $this->parameters['app_version']);
        $this->updateProgress(0, 'Stahuji informace o nové verzi .... OK');
        $this->updateProgress(1, 'Stahuji datový soubor nové verze ....');
        $this->downloadNewVersion($this->parameters['ic_install'], $this->parameters['app_version']);
        $this->updateProgress(1, 'Stahuji datový soubor nové verze .... OK');

        //check md5
        $dir = __DIR__ . "/../../../upgrades/";
        if (!is_dir($dir))
            mkdir($dir);
        $file_name = 'tmpUpgrade.zip';
        $save_file_loc = $dir . $file_name;
        if (file_exists($save_file_loc)) {
            $this->updateProgress(2, 'Kontroluji stažená data ....');
            $md5Tmp = md5_file($save_file_loc);
            if ($md5Tmp == $this->md5Checksum) {
                $this->updateProgress(2, 'Kontroluji stažená data .... OK');
                if ($tmpUpdate = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch()) {
                    $now = new Nette\Utils\DateTime();
                    //extract into correct folder
                    if ($this->extract($tmpUpdate['id'])) {
                        $tmpUpdate->update(['downloaded' => 1, 'error' => 0, 'download_date' => $now]);
                        $this->redirect('default');
                    }


                }
            } else {
                $this->updateProgress(2, 'Kontroluji stažená data .... Chyba!');
                unlink($save_file_loc);
                if ($tmpUpdate = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch()) {
                    $tmpUpdate->update(['downloaded' => 0, 'error' => 1, 'download_date' => null]);
                }
            }
        }
        $this->updateProgress(4, 'Hotovo');
        $this->redrawControl('updateProgress');
        $this->redrawControl('stopProgress');

    }

    public function handleGetProgress()
    {
        //session_write_close();
        $this->redrawControl('updateProgress');
    }

    public function handleResetProgress()
    {
        //session_write_close();
        $this->checkNewVersion($this->parameters['ic_install'], $this->parameters['app_version']);
        if ($tmpNew = $this->VersionsManager->findAllTotal()->where('version = ?', $this->newVersion)->fetch()) {
            $tmpNew->update(['progress' => json_encode([])]);
        }
        $this->redrawControl('updateProgress');
    }

    private function downloadNewVersion($ic, $version)
    {
        // Initialize a file URL to the variable
        $url = 'https://beta.klienti.cz/api/app-version/get-last';

        // Initialize the cURL session
        $ch = curl_init($url);

        // Initialize directory name where
        // file will be save
        //$dir = './';
        //prepare folder
        $dir = __DIR__ . "/../../../upgrades/";
        if (!is_dir($dir))
            mkdir($dir);

        // Use basename() function to return
        // the base name of file
        //$file_name = basename($url);
        $file_name = 'tmpUpgrade.zip';

        // Save file into file location
        $save_file_loc = $dir . $file_name;

        // Open file
        $fp = fopen($save_file_loc, 'wb');

        // It set an option for a cURL transfer
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_POSTFIELDS,
            "ic=$ic&version=$version");

        // Perform a cURL session
        curl_exec($ch);

        // Closes a cURL session and frees all resources
        curl_close($ch);

        // Close file
        fclose($fp);


    }

    public function handleEraseVersion($id)
    {
        //TODO: unlink files and directories
        if ($tmpData = $this->VersionsManager->findAllTotal()->where('id = ?', $id)->fetch()) {
            $destDir = __DIR__ . "/../../../upgrades/" . $tmpData['version'] . "/";
            $this->delTree($destDir);
            $tmpData->delete();
        }
        $this->redirect('default');
    }

    private function delTree($dir)
    {
        if (is_dir($dir)) {
            $files = array_diff(scandir($dir), array('.', '..'));
            foreach ($files as $file) {
                (is_dir("$dir/$file")) ? $this->delTree("$dir/$file") : unlink("$dir/$file");
            }
            rmdir($dir);
        }

    }


    public function handleInstallVersion($id)
    {
        //1. zakázat přihlašování z důvodu probíhající údržby
        //2. aplikovat SQL
        //3. zkopírovat /app
        //4. zkopírovat /www

        session_write_close();
       // sleep(60);
       // die;
        //add.1 - forbid login and show maintenance
        if ($tmpData = $this->VersionsManager->findAlLTotal()->where('id = ?', $id)->fetch()) {
            $tmpData->update(['in_progress' => 1, 'start_dtm' => new Nette\Utils\DateTime(), 'progress' => json_encode([])]);
            $versionDir = __DIR__ . "/../../../upgrades/" . $tmpData['version'] . '/';
            //add.2 SQL aplication
            try {

                $this->updateProgress(0, 'Aplikuji SQL script .... ', $id);
                $sqlFile = $versionDir . "update.sql";

                if ($tmpData['sql_done'] == 0 && is_file($sqlFile) && $file = fopen($sqlFile, "r")) {
                    $i = 0;
                    while (!feof($file)) {
                        //echo fgets($file). "<br />";
                        $line = fgets($file);
                        $result = $this->database->query($line);

                        if ($result) {
                            Debugger::log('line: ' . $i . ' : OK : ' . $line);
                        } else {
                            Debugger::log('line: ' . $i . ' : ERROR : ' . $line);
                        }
                        $tmpData->update(['sql_done_lines' => $i]);
                        $i++;
                    }
                    fclose($file);
                    $this->updateProgress(0, 'Aplikuji SQL script .... OK', $id);
                    $tmpData->update(['sql_done' => 1]);

                } elseif ($tmpData['sql_done'] == 0) {
                    $tmpData->update(['sql_done' => 0]);
                    $this->updateProgress(0, 'Aplikuji SQL script .... ERROR', $id);
                    Debugger::log('Upgrade error while opening file: ' . $sqlFile);
                } elseif ($tmpData['sql_done'] == 1) {
                    $this->updateProgress(0, 'Aplikuji SQL script .... SKIPPED', $id);
                    Debugger::log('SQL skipped, was done: ' . $sqlFile);
                }

            } catch (Exception $e) {
                $this->updateProgress(0, 'Aplikuji SQL script .... ERROR', $id);
                $tmpData->update(['sql_done' => 0]);
                Debugger::log('Upgrade SQL error: ' . $e->getMessage());
            }
        }

        //add. 3 copy /app
        $this->updateProgress(1, 'Kopíruji složku APP .... ', $id);
        try {
            $appDir = $versionDir . 'app/';
            $destApp = __DIR__ . "/../../../app";
            if (is_dir($appDir)) {
                //\Nette\Utils\FileSystem::copy($appDir, $destApp);
                $this->copyDir($appDir, $destApp);
            }
            $this->updateProgress(1, 'Kopíruji složku APP .... OK', $id);
            $tmpData->update(['app_done' => 1]);
        } catch (Exception $e) {
            $this->updateProgress(1, 'Kopíruji složku APP .... ERROR', $id);
            $tmpData->update(['app_done' => 0]);
            Debugger::log('Copy APP error: ' . $e->getMessage());
        }

        //add. 4. copy /www
        $this->updateProgress(2, 'Kopíruji složku WWW .... ', $id);
        try {
            $wwwDir = $versionDir . 'www/';
            $destWww = __DIR__ . "/../../../www";
            if (is_dir($wwwDir)) {
                //\Nette\Utils\FileSystem::copy($wwwDir, $destWww);
                $this->copyDir($wwwDir, $destWww);
            }
            $this->updateProgress(2, 'Kopíruji složku WWW.... OK', $id);
            $tmpData->update(['www_done' => 1]);
        } catch (Exception $e) {
            $this->updateProgress(2, 'Kopíruji složku WWW .... ERROR', $id);
            $tmpData->update(['www_done' => 0]);
            Debugger::log('Copy WWW error: ' . $e->getMessage());
        }

        //add. 4. copy /changelist
        $this->updateProgress(3, 'Kopíruji changelist.txt .... ', $id);
        try {
            $wwwDir = $versionDir . 'changelist.txt';
            $destWww = __DIR__ . "/../../../changelist.txt";
            //if (is_dir($wwwDir)) {
                //\Nette\Utils\FileSystem::copy($wwwDir, $destWww);
                \Nette\Utils\FileSystem::copy($wwwDir, $destWww);
                //$this->copyDir($wwwDir, $destWww);
            //}
            $this->updateProgress(3, 'Kopíruji changelist.txt ... OK', $id);
            //$tmpData->update(['changelist_done' => 1]);
        } catch (Exception $e) {
            $this->updateProgress(3, 'Kopíruji changelist.txt .... ERROR', $id);
            //$tmpData->update(['chan_done' => 0]);
            Debugger::log('Copy changelist.txt error: ' . $e->getMessage());
        }

        //5. erase cache
        /*$this->updateProgress(3, 'Mažu cache ....', $id);
        try {
            $this->handleEraseCache();
            $this->updateProgress(3, 'Mažu cache .... OK', $id);
        }catch (Exception $e){
            $this->updateProgress(3, 'Mažu cache .... ERROR', $id);
            Debugger::log('Cache erase error: ' . $e->getMessage());
        }*/

        $tmpData->update(['in_progress' => 0, 'install_date' => new Nette\Utils\DateTime()]);

        $this->redrawControl('updateProgress');
        $this->redrawControl('stopProgress');

    }

    /**Extract zip archive into folder
     * @param $id
     * @return bool
     */
    private function extract($id): bool
    {
        $retVal = FALSE;
        //prepare folder
        if ($tmpData = $this->VersionsManager->findAllTotal()->where('id = ?', $id)->fetch()) {
            $destDir = __DIR__ . "/../../../upgrades/" . $tmpData['version'] . "/";
            if (!is_dir($destDir))
                mkdir($destDir);

            $dir = __DIR__ . "/../../../upgrades/";
            if (!is_dir($dir))
                mkdir($dir);

            $file_name = $dir . 'tmpUpgrade.zip';
            $this->updateProgress(3, 'Rozbaluji archiv .... ');
            $zip = new \ZipArchive;
            if ($zip->open($file_name) === TRUE) {
                $zip->extractTo($destDir);
                $zip->close();
                $this->updateProgress(3, 'Rozbaluji archiv .... OK');
                $retVal = TRUE;
            } else {
                $retVal = FALSE;
                $this->updateProgress(3, 'Rozbaluji archiv .... chyba!');
            }

        }
        // bdump($retVal);
        return $retVal;
    }

    private function copyDir(string $src, string $dst)
    {
        $dir = opendir($src);
        @mkdir($dst);
        while (($file = readdir($dir))) {
            if (($file != '.') && ($file != '..')) {
                if (is_dir($src . '/' . $file)) {
                    $this->copyDir($src . '/' . $file, $dst . '/' . $file);
                } else {
                    copy($src . '/' . $file, $dst . '/' . $file);
                }
            }
        }
        closedir($dir);
    }

}
