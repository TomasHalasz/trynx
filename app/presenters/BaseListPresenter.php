<?php

namespace App\Presenters;

use Nette\Caching\Cache;
use Nette\Caching\Storages\FileStorage;
use Nette\Mail\Message,
    Nette\Utils\Strings;
use Nette\Mail\SendmailMailer;

use Netpromotion\Profiler\Profiler;
use Nette\Application\UI\Form;
use Exception;
use Nette\Utils\DateTime;
use Tracy\Debugger;

class BaseListPresenter extends BaseAppPresenter
{

    public $DataManager, $FilterC, $filterColumns, $agregateColumns, $DefSort, $showChildLink = FALSE, $parentLink = FALSE, $defValues, $numberSeries = FALSE, $toolbar, $bscToolbar, $rowFunctions = [];

    public $pdFilter = [];
    /** @persistent */
    public $pdFilterIndex = NULL;
    public $tableNameAddOn = "";
    public $dataColumns, $formatColumns, $conditionRows, $readOnly, $myReadOnly, $relatedTable = NULL, $mainFilter = NULL, $dataColumnsRelated = NULL;
    public $bscPages = [], $bscTitle = [], $bscOff = TRUE, $bscEnabled = TRUE, $bscId = NULL, $formName = "", $bscSums = [];
    public $quickFilter = [];
    public $userFilter = [], $userFilterVal = NULL, $userFilterEnabled = FALSE;
    public $userCxsFilter = [], $cxsEnabled = FALSE;
    public $userAssigned;
    public $forceRO = false;
    public $itemId = NULL;
    public $showHistory = false;
    public $sqlQuery = [];
    public $sqlQueryIndex = NULL;
    public $exportType = '';
    public $dataForSums;
    public $gridRows = 30;

    public $groupActions = [];
    public $downloadfile = NULL;
    public $showPreviewDoc = FALSE;
    public $previewLatteFile = NULL;
    public $enabledPreviewDoc = FALSE;

    //private $AllFilteredData = false;


    /** @persistent */
    public $filterValue;

    /** @persistent */
    public $cxs = NULL;

    /** @persistent */
    public $offsetMove = 0;

    //,$relatedTableHide = array();
    //$emailData = array(),


    public $actionList = [];
    public $report = [];
    public $rptIndex = 1, $reportModalShow = FALSE;

    public $activeTab = 1;

    //public $id;
    /** @persistent */
    public $id;

    public $bscPagesActive = NULL;

    /** @persistent */
    public $modal;

    /**
     * @inject
     * @var  \DatabaseAccessor
     */
    public $accessor;

    /**
     * @inject
     * @var \App\Model\PricesManager
     */
    public $PricesManager;

    /**
     * @inject
     * @var \App\Model\PriceListPartnerManager
     */
    public $PriceListPartnerManager;


    /**
     * @inject
     * @var \App\Model\CurrenciesManager
     */
    public $CurrenciesManager;

    /**
     * @inject
     * @var \App\Model\TablesSettingManager
     */
    public $TablesSettingManager;


    /**
     * @inject
     * @var \App\Model\CompaniesManager
     */
    public $CompaniesManager;


    /**
     * @inject
     * @var \App\Model\PriceListManager
     */
    public $PriceListManager;


    /**
     * @inject
     * @var \App\Model\PartnersCoopManager
     */
    public $PartnersCoopManager;

    /**
     * @inject
     * @var \App\Model\PartnersBookWorkersManager
     */
    public $PartnersBookWorkersManager;

    /**
     * @inject
     * @var \App\Model\PartnersBranchManager
     */
    public $PartnersBranchManager;

    /**
     * @inject
     * @var \App\Model\HistoryManager
     */
    public $HistoryManager;

    /**
     * @var mixed
     */
    private $returnUrl = "";

    /**
     * @var void
     */
    private $downloadfilePDF;



    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

    }

    public function renderEdit($id, $copy, $modal)
    {
        $this->template->docLang = $this->docLang;
        $this->template->activeTab = $this->activeTab;
        $this->template->modal = $modal;
        $this->template->showHistory = $this->showHistory;
        //$this->template->docTemplate = $this->docTemplate;
        //bdump( $this->partnerComment);
        //bdump($this->partnerCommentName);

        //bdump('partnerComment renderEdit', 'TED3');
        //$this->template->partnerComment     = $this->partnerComment;
        //$this->template->partnerCommentName = $this->partnerCommentName;


      //  $this->partnerComment = '';
      //  $this->partnerCommentName = '';
      //  $this->template->partnerComment = '';
      //  $this->template->partnerCommentName = '';


        $this->setPartnersBook();

        //call formsettings
        $this->formSettings($id, $copy);

        //settings for edit form to template
        if ($gridSet = $this->TablesSettingManager->findBy(['cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn])->fetch()) {
            $this->template->editSet = json_decode($gridSet['edit_columns'], true);
        }

        //url for return from edit
        $mySection = $this->getSession($this->name . '-url');
        if (isset($mySection['url']))
            $this->returnUrl = $mySection['url'];

        $this->template->returnUrl = $this->returnUrl;

        //bdump($this->mainTableName );
        if (!$this->bscEnabled) {
            $this->template->bscPages = $this->bscPages;
            $this->template->bscOff = $this->bscOff;
            $this->template->bscEnabled = $this->bscEnabled;
            if (!is_null($this->id))
                $tmpbscData = $this->DataManager->findAll()->where($this->DataManager->getTableName() . '.id =  ?', $this->id)->fetch();
            else
                $tmpbscData = FALSE;
            $this->template->bscData = $tmpbscData;
            $this->template->bscTitle = $this->bscTitle;
            $this->template->bscSums = $this->bscSums;
            $this->template->bscToolbar = $this->bscToolbar;
            if ($this->mainTableName == 'cl_invoice')
                $this->formName = $tmpbscData['inv_number'] . ' ' . $this->translator->translate('F.vydaná');
            elseif ($this->mainTableName == 'cl_invoice_advance')
                $this->formName = $tmpbscData['inv_number'] . ' ' . $this->translator->translate('F.zálohová');
            elseif ($this->mainTableName == 'cl_invoice_arrived')
                $this->formName = $tmpbscData['inv_number'] . ' ' . $this->translator->translate('F.přijatá');
            elseif ($this->mainTableName == 'cl_invoice_internal')
                $this->formName = $tmpbscData['inv_number'] . ' ' . $this->translator->translate('F.interní');
            elseif ($this->mainTableName == 'cl_commission')
                $this->formName =  $tmpbscData['cm_number'] . ' ' . $this->translator->translate('Zakázka');
            elseif ($this->mainTableName == 'cl_offer')
                $this->formName =  $tmpbscData['cm_number'] . ' ' . $this->translator->translate('Nabídka');
            elseif ($this->mainTableName == 'cl_cash')
                $this->formName =  $tmpbscData['cash_number'] . ' ' . $this->translator->translate('Pokladna');
            elseif ($this->mainTableName == 'cl_delivery_note')
                $this->formName =  $tmpbscData['dn_number'] . ' ' . $this->translator->translate('D.list');
            elseif ($this->mainTableName == 'cl_order')
                $this->formName =  $tmpbscData['od_number'] . ' ' . $this->translator->translate('Objednávka');
            elseif ($this->mainTableName == 'cl_sale')
                $this->formName =  $tmpbscData['sale_number'] . ' ' . $this->translator->translate('Prodejka');
            elseif ($this->mainTableName == 'cl_store_docs')
                $this->formName =  $tmpbscData['doc_number'] . ' ' . $this->translator->translate('Sklad');
            elseif ($this->mainTableName == 'cl_transport')
                $this->formName =  $tmpbscData['tn_number'] . ' ' . $this->translator->translate('Doprava');
            elseif ($this->mainTableName == 'in_complaint')
                $this->formName =  $tmpbscData['co_number'] . ' ' . $this->translator->translate('Reklamace');
            elseif ($this->mainTableName == 'in_emailing')
                $this->formName =  $tmpbscData['em_number'] . ' ' . $this->translator->translate('Email');
            elseif ($this->mainTableName == 'in_estate')
                $this->formName =  $tmpbscData['est_number'] . ' ' . $this->translator->translate('Majetek');
            elseif ($this->mainTableName == 'in_staff')
                $this->formName =  $tmpbscData['personal_number'] . ' ' . $this->translator->translate('Zaměstnanec');
            elseif ($this->mainTableName == 'in_instructions')
                $this->formName =  $tmpbscData['in_number'] . ' ' . $this->translator->translate('Oznámení');
            elseif ($this->mainTableName == 'cl_partners_event')
                $this->formName =  $tmpbscData['event_number'] . ' ' . $this->translator->translate('Helpdesk');
            elseif ($this->mainTableName == 'cl_task')
                $this->formName =  $tmpbscData['task_number'] . ' ' . $this->translator->translate('Úkol');

            $this->template->formName = $this->formName;
            $this->payload->title = $this->formName;


            //19.04.2022 - show modal window with partners comment if is showing turned on
            //bdump($tmpbscData, 'aaaa');
            //die;
            //if ($tmpbscData && isset($tmpbscData['cl_partners_book_id']) && !is_null($tmpbscData['cl_partners_book_id']) && $tmpbscData->cl_partners_book['show_comment']){
            //    $this->template->partnerComment =  nl2br($tmpbscData->cl_partners_book['comment']);
                //$this->showModal('showComment');
            //}else {
            //    $this->template->partnerComment = '';
            //}


            $this->template->rowFunctions = $this->rowFunctions;
            $this->template->relatedTable = $this->relatedTable;
            $this->template->dataColumnsRelated = $this->dataColumnsRelated;
            //$this->template->relatedTableHide   = $this->relatedTableHide;
            $this->template->actionList = $this->actionList;


            $this->template->scrollTo = '';
            $this->template->select2Focus = '';
            //if (!$this->bscOff) {
            $this->formSettings($this->id, FALSE);
            //}
            $this->template->headerText = NULL;
            $this->gridSet(); //settings for grid and sums
            $this->emlPreview = TRUE;
            if (!is_null($this->id)) {
                //$this->bscId =  $this->template->lastActiveId;
                $this->bscId = $this->id;
                $this->template->lastActiveId = $this->bscId;
                //bdump($this->bscId, 'baselist presenter bscId');
            }
        }

    }

    /** used in presenter to make form readonly by another reason
     * @return bool
     */
    public function forceRO($data)
    {
        //if (isset($data['locked']) && $data['locked'] == 1)
        //bdump($data->toArray());
        //bdump(in_array('locked', $data->toArray(), TRUE));
        //bdump($data->toArray());
        //bdump(array_search('locked', $data->toArray(),TRUE),'array search');
        //if (!is_null($data) && array_search('locked', $data->toArray(), TRUE) && $data['locked'] == 1)

        if (!is_null($data) && array_key_exists('locked', $data->toArray()) && $data['locked'] == 1)
            $ret = TRUE;
        else
            $ret = FALSE;

        //bdump($ret, 'forceRO');
        return $ret;
    }

    /*04.07.2018 - settings for form
     * readonly, default values
     */
    public function formSettings($id, $copy)
    {

        ////profiler::start();
        $this->template->_form = $this['edit'];

        //nastaveni readonly poli
        foreach ($this['edit']->getControls() as $control) {
            if (isset($this->readOnly[$control->name]))
                $control->controlPrototype->readonly = 'readonly';
        }
        //
        $defData1 = $this->DataManager->findAll()->where([$this->DataManager->tableName . '.id' => $id])->fetch();
        $this->forceRO = $this->forceRO($defData1);
        $this->template->forceRO = $this->forceRO;

        //bdump($id);
        //bdump($defData1);

        //bdump($this->isAllowed($this->name,'edit'));
        $isPrivate = $this->UserManager->isPrivate($this->DataManager->tableName, $this->settings->id, $this->getUser()->id);
        //bdump($isPrivate,'isPrivate');


        if ((!$this->isAllowed($this->name, 'edit') && !$this->isAllowed($this->name, 'write'))
            || ($isPrivate && $defData1['cl_users_id'] != $this->getUser()->id && !is_null($defData1['cl_users_id'])
                && (isset($defData1['cl_users_id2']) && $defData1['cl_users_id2'] != $this->getUser()->id))
            || $this->forceRO($defData1)
        ) {
            foreach ($this['edit']->getControls() as $control) {
                if ($control->name != 'back') {
                    $control->controlPrototype->readonly = 'readonly';
                    // 08.02.2021 removed:   $control->controlPrototype->attrs['type'] == NULL ||
                    if ($control->controlPrototype->attrs['type'] == 'submit' || $control->controlPrototype->attrs['type'] == NULL || $control->controlPrototype->attrs['type'] == 'checkbox')
                        $control->setDisabled(TRUE);

                    if (isset($control->setValidationScope))
                        $control->setValidationScope([]);

                    //01.06.2017 - selectbox solution redonly
                    if ($control->options['type'] == 'select') {
                        //dump($control->name);
                        //dump($defData1[$control->name]);
                        //fill selectbox with only one value which is default
                        //$arrOne = array($control->value => $control->items[$defData1[$control->name]]);
                        //$control->items = $arrOne;

                    }
                }
                //dump($control->name);
            }
            $this->myReadOnly = TRUE;
            $this->template->myReadOnly = TRUE;
        } else {
            $this->myReadOnly = FALSE;
            $this->template->myReadOnly = FALSE;
        }


        //$this['edit']['cl_partners_book_id']->checkAllowedValues = FALSE;

        //dump(count($this['edit']->getControls()));
        //dump($this['edit']);
        //die;
        /*foreach ($this['edit']->getControls() as $control) {
               if ($control->options['type'] == 'select')
                    {
                 $control->controlPrototype->checkAllowedValues = FALSE;
               }

        }*/

        if ($defData1) {
            //bdump($defData1);
            ///05.01.2017 - manage values from table for selectboxes which aren't in  available list
            //$tmpTest = $defData1->fetch();
            $defData = $defData1->toArray();
            foreach ($this['edit']->components as $one) {
                //if is type of form input selectbox
                if ($one->options['type'] == 'select') {
                    //check if value is not string, in this case convert from any number to int
                    //it's because we are searching in array's key
                    $testValue = $defData1[$one->name];
                    //bdump($testValue);
                    if (!is_string($testValue)) {
                        $testValue = (int)$testValue;
                    }

                    if (!array_key_exists($testValue, $one->getItems())) {
                        //if defaultvalue from row isn't in list of available values, use NULL
                        $defData[$one->name] = NULL;
                    }

                }
            }


            //bdump($defData);
            $this['edit']->setValues($defData);
            //format of date inputs
            $arrDateFormat = [];
            foreach ($defData as $key => $one) {
                if (isset($this->dataColumns[$key]['format']) && $defData[$key] != NULL && $this->dataColumns[$key]['format'] == 'date') {
                    $arrDateFormat[$key] = $defData[$key]->format('d.m.Y');
                }
                if (isset($this->dataColumns[$key]['format']) && $defData[$key] != NULL && $this->dataColumns[$key]['format'] == 'datetime') {
                    $arrDateFormat[$key] = $defData[$key]->format('d.m.Y H:i:s');
                }
            }
            $this['edit']->setValues($arrDateFormat);
        }


        $this->template->settings = $this->CompaniesManager->getTable()->fetch();
        $this->template->data = $defData1;
        $this->id = $id;
        if ($copy) {
            $this->getNumberSeries('');
            $arrNS = [];
            $arrNS[$this->numberSeries['table_key']] = $this->defValues[$this->numberSeries['table_key']];
            $arrNS[$this->numberSeries['table_number']] = $this->defValues[$this->numberSeries['table_number']];
            //Debugger::fireLog($data);
            $this['edit']->setValues($arrNS);
            $this['edit']->setValues(['id' => '']);
        }
        // //profiler::finish('formSettings');
    }


    public function actionDefault()
    {
        //22.07.2018 - if bsc is on we must set id to some value
        //if (!$this->bscOff)
        //{
        //$this->id = 114;
        //}

    }

    protected function startup()
    {
        parent::startup();

        /*group actions*/
        if ($this->isAllowed($this->presenter->name, 'erase')) {
            $this->groupActions = ['erase' => 'vymazat'];
            if ($this->DataManager->isLockable()) {
                $this->groupActions['lock'] = 'zamknout';
                $this->groupActions['unlock'] = 'odemknout';
            }
        }
        $tmpStatuses = [];

        /*predefined filters*/
        $arrStatusUse = str_getcsv($this->name, ":");
        if (count($arrStatusUse) > 0) {
            $tmpStatusUse = strtolower($arrStatusUse[1]);
        } else {
            $tmpStatusUse = $this->mainTableName;
        }
        $tmpStatus = $this->StatusManager->findAll()->where('status_use = ?', $tmpStatusUse)->order('status_name');
        $i = 1;
        foreach ($tmpStatus as $key => $one) {
            $tmpArr = array('url' => $this->link('pdFilter!', array('index' => $i)),
                'filter' => 'cl_status_id = ' . $one['id'],
                'sum' => array(),
                'rightsFor' => 'read',
                'label' => $one['status_name'],
                'title' => $one['status_name'],
                'data' => array('data-ajax="true"', 'data-history="true"'),
                'class' => 'ajax', 'icon' => 'iconfa-filter');
            $this->pdFilter[$i] = $tmpArr;

            /*group actions - set status*/
            if ($this->isAllowed($this->presenter->name, 'edit')) {
                $tmpStatuses['status_' . $one['id']] = $one['status_name'];
            }

            $i++;
        }
        $this->groupActions['Změna stavu'] = $tmpStatuses;



    }


    public function renderDefault($page_b = 1, $idParent, $filter, $sortKey, $sortOrder, $filterColumn, $filterValue, $modal, $cxs)
    {


/*        if ($this->action == 'default' && $this->name != 'Application:HelpdeskSimple') {
            bdump('partnerComment default erase', 'TED3');
            $this->template->partnerComment     = '';
            $this->template->partnerCommentName = '';
        }*/

        $this->toolbar['export']['group']['csv'] = array('url' => $this->link('exportData!', array('type' => 'csv')),
            'rightsFor' => $this->translator->translate('report'),
            'label' => 'CSV',
            'title' => $this->translator->translate('Stáhne_zobrazené_doklady_do_CSV_souboru'),
            'data' => array('data-ajax="false"', 'data-history="false"'),
            'class' => 'ajax', 'icon' => 'iconfa-file');

        $this->toolbar['export']['group']['xls'] = array('url' => $this->link('exportData!', array('type' => 'xls')),
            'rightsFor' => $this->translator->translate('report'),
            'label' => 'XLS',
            'title' => $this->translator->translate('Stáhne_zobrazené_doklady_do_XLS_souboru'),
            'data' => array('data-ajax="false"', 'data-history="false"'),
            'class' => 'ajax', 'icon' => 'iconfa-file');

        $this->toolbar['export']['group']['xml'] = array('url' => $this->link('exportData!', array('type' => 'xml')),
            'rightsFor' => $this->translator->translate('report'),
            'label' => 'XML',
            'title' => $this->translator->translate('Stáhne_zobrazené_doklady_do_XML_souboru'),
            'data' => array('data-ajax="false"', 'data-history="false"'),
            'class' => 'ajax', 'icon' => 'iconfa-file');

        $this->toolbar['export']['group_settings'] = array('group_label' => $this->translator->translate('Export'),
            'group_class' => 'btn btn-primary dropdown-toggle btn-sm',
            'group_title' => $this->translator->translate('Export_zobrazených_záznamů_do_vybraného_formátu'), 'group_icon' => 'iconfa-file-export');

        $httpRequest = $this->getHttpRequest();
        //save url used for return from edit
        $mySection = $this->getSession($this->name . '-url');
        $mySection['url'] = $httpRequest->getUrl();
        $this->template->showHistory = $this->showHistory;
        $this->template->enabledPreviewDoc = $this->enabledPreviewDoc;
        $this->template->showPreviewDoc = $this->showPreviewDoc;

       // $this->template->partnerComment = '';

        //bdump($page_b);
        //bdump($filter);

        //$this->translator->domain('applicationModule.invoice');

        //$this->template->setTranslator($this->translator);
        $this->template->downloadfile = $this->downloadfile;
        $this->template->pdFilterName = "";
        $this->template->Profiler = new Profiler();
        $this->template->headerText = NULL;
        $this->template->modal = $modal;
        $this->template->report = $this->report;
        $this->template->reportModalShow = $this->reportModalShow;
        $this->template->rptIndex = $this->rptIndex;
        $this->template->pdFilter = $this->pdFilter;
        $this->template->quickFilter = $this->quickFilter;
        $this->template->userFilterEnabled = $this->userFilterEnabled;
        $this->template->cxsEnabled = $this->cxsEnabled;
        $this->template->sqlQuery = $this->sqlQuery;
        $this->template->sqlQueryIndex = $this->sqlQueryIndex;
        $this['query']->setDefaults(array('sqlQueryIndex' => $this->sqlQueryIndex));
        //bdump($this->sqlQueryIndex);

        $this->gridSet(); //settings for grid and sums

        //paginator start
        $paginator = new \Nette\Utils\Paginator;
        $ItemsOnPage = $this->gridRows;
        $paginator->setItemsPerPage($ItemsOnPage); // počet položek na stránce

        //08.05.2021
        $dataItems = $this->prepareData($filterColumn, $filterValue, $filter, $idParent, $cxs);
        $this->dataForSums = clone $dataItems;

        if (is_null($sortKey) && is_null($sortOrder)) {
            $sortKey = $this->DefSort;
            if (strpos($sortKey, 'DESC') || strpos($sortKey, 'ASC')) {
                if (strpos($sortKey, 'DESC')) {
                    $sortOrder = "DESC";
                } elseif (strpos($sortKey, 'ASC')) {
                    $sortOrder = "ASC";
                }

                $sortKey = str_replace("ASC", "", $sortKey);
                $sortKey = str_replace("DESC", "", $sortKey);
                $sortKey = trim($sortKey);
            } else
                $sortOrder = "ASC";
        }

        $sortString = $sortKey . ' ' . $sortOrder . ', id ' . $sortOrder;    //17.12.2018 - sorting according to ID is included in everycases to sort the same values in second way


        //$dataItems->max(':cl_partners_event.date')
        //$this->AllFilteredData = clone $dataItems->order($sortString);
        $totalItems = $dataItems->count();
        $paginator->setItemCount($totalItems); // celkový počet položek (např. článků)

        //$paginator->setPage($page); // číslo aktuální stránky, číslováno od 1
        $pages = ceil($totalItems / $ItemsOnPage);
        $this->template->paginator = $paginator;
        $steps = array();
        for ($i = 1; $i <= $pages; $i++) {
            $steps[] = $i;
        }
        $this->template->steps = $steps;

        //profiler::start();
        //bdump($this->id, 'id');
        if ($this->id != NULL) {
            //pokud $id není NULL, najdeme na které stránce tato položka je a přesuneme se na ni
            //musíme vzít pořadové číslo záznamu podle aktuálního řazení a filtru a vydělit jej počtem položek na stránce
            //bdump($sortString);
            $tmpFinalData = clone $dataItems;
            $paginator->setPage($page_b);

            $finalData = $dataItems->order($sortString)->limit($paginator->getLength(), $paginator->getOffset() + $this->offsetMove);

            $fdTest = $finalData->fetchPairs('id', 'id');
            if (!array_key_exists($this->id, $fdTest)) {
                $tmpIndex = $this->DataManager->getIndex($this->id, $tmpFinalData->order($sortString));
                //$tmpIndex = $this->DataManager->getIndex($this->id, $dataItems->order($sortString));

                // bdump($this->id,'id');
                // bdump($tmpIndex,'tmpIndex');
                $newPage = ceil($tmpIndex / $paginator->getItemsPerPage());

                if ($newPage != $page_b) {
                    $page_b = $newPage;
                }
                if ($page_b > 0) {
                    //$paginator->setPage($page_b); // číslo aktuální stránky, číslováno od 1
                    $this->page_b = $page_b;
                }
                $paginator->setPage($page_b);
                //$dataItems = clone $tmpFinalData;
                $finalData = $dataItems->limit($paginator->getLength(), $paginator->getOffset() + $this->offsetMove);
            }

            $this->template->lastActiveId = $this->id; //for color highlit of last edited row
            if ($this->template->lastActiveRow = $this->DataManager->find($this->id)) {
                $this->template->lastActiveTable = $this->template->lastActiveRow->getTable()->getName();
            } else {
                $this->template->lastActiveTable = "";
            }
        } else {
            //bdump($page_b, 'page_b');
            $this->template->lastActiveId = NULL;
            $paginator->setPage($page_b);
            $finalData = $dataItems->order($sortString)->limit($paginator->getLength(), $paginator->getOffset() + $this->offsetMove);
        }
        //profiler::finish('set_page');
        //$this->checkPage($tmpFinalData, $page_b, $paginator);


        $this->template->dataSource = $finalData;

        //bdump($paginator->getLength());
        //bdump($paginator->getOffset());
        //paginator end

        //08.03.2018 - set bscId to last active, or first line in page
        //if (!is_null( $this->template->lastActiveId))
        if (!is_null($this->id)) {
            //$this->bscId =  $this->template->lastActiveId;
            $this->bscId = $this->id;
            $this->template->lastActiveId = $this->bscId;
            //bdump($this->bscId, 'baselist presenter bscId');
        } else {
            if ($tmpbscData = $finalData->fetch()) {
                $this->bscId = $tmpbscData->id;
            } else {
                $this->bscId = 0;
            }

            $this->template->lastActiveId = $this->bscId;
            //bdump($this->bscId, 'bscId');
        }

        $mySection = $this->getSession($this->name . '_checked_records');
        // bdump(  $mySection['checked']);
        $this->template->dataChecked = $mySection['checked'];

        //11.08.2019 - save selected row->id to session, because of in handleSort we don't have current row->id. Table and header with sort links  is not redrawed
        $mySection = $this->getSession($this->name . '-id');
        $mySection['id'] = $this->bscId;
        //bdump($this->id, 'id');

        //$this->bscPagesActive = $bscPagesActive;
        $mySection = $this->getSession($this->name . '-tabbsc');
        if (isset($mySection['key'])) {
            $this->bscPagesActive = $mySection['key'];
        } else {
            $this->bscPagesActive = NULL;
        }

        if (isset($mySection['scrollTo'])) {
            $this->template->scrollTo = $mySection['scrollTo'];
            unset($mySection['scrollTo']);
        } else {
            $this->template->scrollTo = '';
        }

        if (isset($mySection['select2Focus'])) {
            $this->template->select2Focus = $mySection['select2Focus'];
            unset($mySection['select2Focus']);
        } else {
            $this->template->select2Focus = '';
        }

        //bdump($this->bscPagesActive);

        if (!is_null($this->bscPagesActive)) {
            foreach ($this->bscPages as $key2 => $one) {
                $this->bscPages[$key2]['active'] = false;
            }

            $this->bscPages[$this->bscPagesActive]['active'] = true;
        } else {
            $this->bscPages['card']['active'] = true;
        }

        //bdump($this->id,'this->id v renderDefault');
        //bdump( $this->bscPages[$this->bscPagesActive]['active'] );
        //die;

        $this->template->bscPages = $this->bscPages;
        $this->template->bscOff = $this->bscOff;
        $this->template->bscEnabled = $this->bscEnabled;

        //08.05.2021 * not needed
        //$bscFinal = clone $finalData; //clone $dataItems;

        $tmpbscData = $this->DataManager->findAll()->where($this->DataManager->getTableName() . '.id =  ?', $this->bscId)->fetch();


        $this->template->bscData = $tmpbscData;
        $this->template->bscTitle = $this->bscTitle;
        $this->template->bscSums = $this->bscSums;

        $this->template->sortKey = $sortKey;
        $this->template->sortOrder = $sortOrder;

        $this['userFilter']->setValues(array('filterValue' => $this->userFilterVal, 'cxs' => $this->cxs));

        $this->template->showChildLink = $this->showChildLink;


//        $this->template->filterColumnsVal = array($filterColumn => $filterValue);
        $mySection = $this->getSession('baselistFilter');
        $this->template->filterColumnsVal = $mySection['filter'];
        bdump($mySection['filter']);

        $this->template->dataColumns = $this->dataColumns;
        $this->template->mainTableName = $this->DataManager->getTableName();
        $this->template->showChildLink = $this->showChildLink;
        $this->template->filterColumns = $this->filterColumns;
        $this->template->formatColumns = $this->formatColumns;
        $this->template->conditionRows = $this->conditionRows;
        $this->template->toolbar = $this->toolbar;
        $this->template->bscToolbar = $this->bscToolbar;

        $this->template->rowFunctions = $this->rowFunctions;
        $this->template->relatedTable = $this->relatedTable;
        $this->template->dataColumnsRelated = $this->dataColumnsRelated;
        //$this->template->relatedTableHide   = $this->relatedTableHide;
        $this->template->actionList = $this->actionList;
        $this->template->formName = $this->formName;

        //dump($this->toolbar);
        //die;
        //bdump($this->bscId);

        //04.07.2018 - TH if there is bscpages and form, made form settings
        //11.08.2019 - isset has low perofrmance on large arrays and there is not needed test this:
        //
        //if (!$this->bscOff && isset($this['edit'])) {
        if (!$this->bscOff) {
            $this->formSettings($this->bscId, FALSE);
        }
        ////profiler::finish('form settings main');

        //07.07.2018 - get table parameters
        //size of columns
        $this->template->tables_settings_size = array();
        $this->template->tables_settings_size[$this->template->mainTableName] = $this->UserManager->getTableParam('size', $this->template->mainTableName, $this->user->getId());
        //height of table
        $this->template->tables_settings_tableHeight = $this->UserManager->getTableParam('tableheight', $this->template->mainTableName, $this->user->getId());

        //order of table columns - we must make new order of property $this->dataColumns
        //bdump($this->template->mainTableName);
        //bdump($this->user->getId());
        $tmpArrOrder = $this->UserManager->getTableParam('order', $this->template->mainTableName . $this->tableNameAddOn, $this->user->getId());
        //bdump($tmpArrOrder);
        //die;

        $newColumnOrder = $this->setColumnOrder($tmpArrOrder);
        $this->template->dataColumnsAll = $newColumnOrder['all'];
        $this->template->dataColumns =  $newColumnOrder['visible'];
        //$this->gridSet(); //settings for grid and sums


        //bdump($this->template->dataColumns);

        //27.08.2018 - fill selectbox cl_ partners_book_workers_id and cl_partners_book_id
        //and set value from data for those selectboxes
        ////profiler::start();
        //bdump(isset($this['edit']['cl_partners_book_id']),'isset');
        //bdump(,'array');
        //bdump($tmpData2->cl_partners_book_id);

        $this->setPartnersBook();
        // //profiler::finish('RenderDefault');
        //if ($this->exportType != '') {
        //    $this->exportData();
        //}
    }

    private function setPartnersBook(){
        if (!$this->bscOff && (isset($this['edit']['cl_partners_book_id']) || isset($this['edit']['cl_partners_book_workers_id'])
                || isset($this['edit']['cl_partners_branch_id']))) {

            if ($tmpData2 = $this->DataManager->find($this->id)) {

                //if (isset($tmpData2['cl_partners_book_id'])) {
                if (array_key_exists('cl_partners_book_id', $tmpData2->toArray()) && !is_null($tmpData2->cl_partners_book_id)) {
                    $tmpPartnersBookId = $tmpData2->cl_partners_book_id;
                    $tmpPartnersBookName = $tmpData2->cl_partners_book->company;
                    $tmpWorkerId = $tmpData2->cl_partners_book_workers_id;
                    //if (isset($tmpData2['cl_partners_branch_id'])) {
                    if (array_key_exists('cl_partners_branch_id', $tmpData2->toArray())) {
                        $tmpBranchId = $tmpData2->cl_partners_branch_id;
                    } else {
                        $tmpBranchId = 0;
                    }
                } else {
                    $tmpPartnersBookId = 0;
                    $tmpPartnersBookName = "";
                    $tmpWorkerId = 0;
                    $tmpBranchId = 0;
                }

            } else {
                $tmpPartnersBookId = 0;
                $tmpPartnersBookName = "";
                $tmpWorkerId = 0;
                $tmpBranchId = 0;
            }

            // //profiler::start();
            $arrWorkers = $this->PartnersBookWorkersManager->getWorkersGrouped($tmpPartnersBookId);
            ////profiler::finish('workers');
            if (isset($this['edit']['cl_partners_book_workers_id'])) {
                //if (array_key_exists('cl_partners_book_workers_id', $this['edit'])) {
                $this['edit']['cl_partners_book_workers_id']->setItems($arrWorkers);
                if (array_key_exists($tmpWorkerId, $arrWorkers)) {
                    $this['edit']['cl_partners_book_workers_id']->setValue($tmpWorkerId);
                }
            }

            if (!is_null($tmpData2) && property_exists('cl_partners_branch_id', $tmpData2)) {
                $arrBranches = $this->PartnersBranchManager->getUseRecords($tmpPartnersBookId, $this->mainTableName);
                if (isset($this['edit']['cl_partners_branch_id'])) {
                    //if (array_key_exists('cl_partners_branch_id', $this['edit'])) {
                    $this['edit']['cl_partners_branch_id']->setItems($arrBranches);
                    if (array_key_exists($tmpBranchId, $arrBranches)) {
                        $this['edit']['cl_partners_branch_id']->setValue($tmpBranchId);
                    }
                }
            }

            if (isset($this['edit']['cl_partners_book_id'])) {
                bdump($tmpPartnersBookId,'partners_book_id');
                bdump($tmpPartnersBookName,'partnersbookname');
                $this['edit']['cl_partners_book_id']->setItems([$tmpPartnersBookId => $tmpPartnersBookName]);
                $this['edit']['cl_partners_book_id']->setValue($tmpPartnersBookId);
            }
        }
    }


    public function handleExportData($filterColumn = NULL, $filterValue, $filter = NULL, $idParent = NULL, $cxs = 0, $type = 'xls', $sortKey = NULL, $sortOrder = NULL)
    {
        if (!empty($this->mainTableName)) {
            $dataItems = $this->prepareData($filterColumn, $filterValue, $filter, $idParent, $cxs);
            $sortString = $this->prepareDataSort($sortKey, $sortOrder);
            $filename = $this->formName;
            if ($filename == '') {
                $filename = $this->mainTableName;
            }
            $strDataColumns = "";
            $arrNameColumns = [];
            //get settings of columns for current table and user
            $tmpArrOrder = $this->UserManager->getTableParam('order', $this->mainTableName . $this->tableNameAddOn, $this->user->getId());

            $newColumnOrder = $this->setColumnOrder($tmpArrOrder);
            $dataColumns = $newColumnOrder['visible']; //$this->setColumnOrder($tmpArrOrder);
            foreach ($dataColumns as $key => $one) {
                //if (!isset($one['function'])) {
                $strDataColumns .= ($strDataColumns != "") ? ',' : '';
                $name = (is_array($one)) ? $one[0] : $one;
                $arrNameColumns[$name] = $name;
                if (!isset($one['function'])) {
                    if (!str_contains($key, '.')) {
                            $strDataColumns .= $this->mainTableName . '.' . $key;
                        } else {
                            $strDataColumns .= $key . ' AS ' . str_replace('.', '_', $key);
                        }
                    } else {
                        $strDataColumns .= '" " AS ' . str_replace('.', '_', $key);
                    }
            }

            $dataItems = $dataItems->select('DISTINCT ' . $strDataColumns);
            if (!is_null($sortString) && $sortString != '') {
                $dataItems = $dataItems->order($sortString);
            }
            $dataItems = $dataItems->fetchAll();

            $dataItems = $this->replaceArrValues($dataItems);
            if ($type == 'csv') {
                $this->sendResponse(new \CsvResponse\NCsvResponse($dataItems, $filename . "-" . date('Ymd-Hi') . ".csv", true, ';', 'UTF-8', NULL, $arrNameColumns));
            } elseif ($type == 'xls') {
                $this->sendResponse(new \XlsResponse\NXlsResponse($dataItems, $filename . "-" . date('Ymd-Hi') . ".xls", NULL, $arrNameColumns));
            } elseif ($type == 'xml') {
                $this->sendResponse(new \XMLResponse\XMLResponse($dataItems, $filename . "-" . date('Ymd-Hi') . ".xml"));
            }
        } else {
            $this->flashMessage('Export není prozatím pro tuto tabulku definován.', 'danger');
        }
    }

    private function replaceArrValues($data): array
    {
        $arrData = [];
        foreach ($data as $key => $one) {
            $arrOne = $one->toArray();
            foreach ($arrOne as $key2 => $one2) {
                //Debugger::log('key: '. $key2 . ' value: ' . $one2);
                if (isset($this->dataColumns[$key2]['arrValues'])) {
                    $arrOne[$key2] = $this->dataColumns[$key2]['arrValues'][$data[$key][$key2]];
                } elseif (isset($this->dataColumns[$key2]['function'])) {
                    $params = [];
                    if (isset($this->dataColumns[$key2]['function_param'])) {
                        $params = [];
                        foreach ($this->dataColumns[$key2]['function_param'] as $keyP => $oneP) {
                            bdump($keyP);
                            bdump($oneP);
                            bdump($arrOne);
                            if (strtoupper($oneP) == 'ID')
                                $params[$oneP] = $key;
                            else
                                $params[$oneP] = $arrOne[$oneP];
                        }
                        //dump($params);
                    } else {
                        $params[] = $arrOne[$key2];

                    }

                    $fn = $this->dataColumns[$key2]['function'];
                    bdump($params,'params');
                    Debugger::log('function: ' . $fn . ' params: ' . $params);
                    $retVal = call_user_func_array([$this, $fn], [$params]);
                    Debugger::log('returned: ' . $retVal);
                    $arrOne[$key2] = $retVal;
                    //'function' => 'getWorkplaceCount', 'function_param' => array('id')
                }


            }
            $arrData[$key] = $arrOne;
        }

        return $arrData;
    }

    /*public function getPaymentTypeAppName($type)
    {
        return 'ahoj';
    }*/

    private function prepareDataSort($sortKey, $sortOrder)
    {
        $sortString = '';
        if (is_null($sortKey) && is_null($sortOrder)) {
            $sortKey = $this->DefSort;
            if (strpos($sortKey, 'DESC') || strpos($sortKey, 'ASC')) {
                if (strpos($sortKey, 'DESC')) {
                    $sortOrder = "DESC";
                } elseif (strpos($sortKey, 'ASC')) {
                    $sortOrder = "ASC";
                }
                $sortKey = str_replace("ASC", "", $sortKey);
                $sortKey = str_replace("DESC", "", $sortKey);
                $sortKey = trim($sortKey);
            } else
                $sortOrder = "ASC";

            $sortString = $sortKey . ' ' . $sortOrder;    //17.12.2018 - sorting according to ID is included in everycases to sort the same values in second way
            if ($sortString != '')
                $sortString .= ', ' . $this->mainTableName . '.id DESC';
            else
                $sortString .= $this->mainTableName . '.id DESC';

        }

        return $sortString;
    }

    private function prepareData($filterColumn = NULL, $filterValue, $filter = NULL, $idParent = NULL, $cxs = 0)
    {
        //start of data preparation
        //bdump($)
        $dataItems = $this->DataManager->findAll();
        if (!is_null($this->agregateColumns)) {
            $dataItems = $dataItems->select($this->agregateColumns)->group($this->DataManager->getTableName() . '.id');
        }
        if (!is_null($this->mainFilter)) {
            $dataItems = $dataItems->where($this->mainFilter);
        }
        $this->template->pdSum = [];
        $this->template->pdCurr = "";
        //12.06.2019 - user filter
        $mySection = $this->getSession('baselistFilter');
        if (is_null($filterColumn) && !is_null($filterValue) && is_null($filter)) {
            $this->userFilterVal = $filterValue;
            $this->cxs = $cxs;
            if ($cxs == 1 && $this->cxsEnabled) {
                $ufString = '';
                $ufValues = array();
                foreach ($this->userCxsFilter as $one) {
                    if (!empty($ufString)) {
                        $ufString .= ' OR ';
                    }
                    $ufString .= $one . ' LIKE ?';
                    $ufValues[] = '%' . $this->userFilterVal . '%';
                }

            } else {
                $ufString = '';
                $ufValues = array();
                foreach ($this->userFilter as $one) {
                    if (!empty($ufString)) {
                        $ufString .= ' OR ';
                    }
                    $ufString .= $one . ' LIKE ?';
                    $ufValues[] = '%' . $this->userFilterVal . '%';
                }
            }
            $dataItems = $dataItems->where($ufString, $ufValues);

            $filterValue = NULL;
            $this->template->filterActive = FALSE;
        } elseif (!is_null($filter) || !is_null($filterValue) || isset($mySection['filter'])) {


            if (isset($mySection['filterName']) && $mySection['filterName'] == $this->formName) {
                $tmpArrF = $mySection['filter'];
                $tmpArrF[$filterColumn] = $filterValue;
                $mySection['filter'] = $tmpArrF;
            } else {
                $tmpArrF = array();
                $tmpArrF[$filterColumn] = $filterValue;
                $mySection['filter'] = $tmpArrF;
                $mySection['filterName'] = $this->formName;
            }

            $this->template->filterActive = TRUE;
            if (!is_null($filter)) {
                $filterString = str_replace('?', '"%' . strtoupper($filter) . '%"', $this->FilterC);
            } else {
                $filterString = NULL;
            }

            if ($idParent != NULL) {
                $dataItems = $dataItems->where($this->parentLink . ' = ?', $idParent);
            }

            if (!is_null($filterString)) {
                $dataItems = $dataItems->where($filterString);
            }

            foreach ($mySection['filter'] as $keyF => $oneF) {
                $filterColumn = $keyF;
                $filterValue = $oneF;
                if (!is_null($filterValue) && $filterValue != '') {
                    if (isset($this->dataColumns[$filterColumn]['format']) && $this->dataColumns[$filterColumn]['format'] == 'date') {
                        $arrDates = str_getcsv($filterValue, '-');
                        if (count($arrDates) == 2) {
                            $arrDateFrom = str_getcsv($arrDates[0], '.');
                            $arrDateTo = str_getcsv($arrDates[1], '.');

                            if (count($arrDateFrom) == 3 && count($arrDateTo) == 3) {
                                $filterValue2 = $arrDateFrom[2] . "." . $arrDateFrom[1] . "." . $arrDateFrom[0];
                                $filterValue3 = $arrDateTo[2] . "." . $arrDateTo[1] . "." . $arrDateTo[0];
                            } else {
                                $filterValue2 = $filterValue;
                                $filterValue3 = $filterValue;
                            }
                            $dataItems = $dataItems->where($filterColumn . ' >= ? AND ' . $filterColumn . ' <= ?', $filterValue2, $filterValue3);

                        } else {
                            $arrDate = str_getcsv($filterValue, '.');
                            if (count($arrDate) == 3) {
                                $filterValue2 = $arrDate[2] . "." . $arrDate[1] . "." . $arrDate[0];
                            } else {
                                $filterValue2 = $filterValue;
                            }
                            $dataItems = $dataItems->where($filterColumn . ' = ?', $filterValue2);
                        }
                    } else {
                        $dataItems = $dataItems->where($filterColumn . ' LIKE ?', $filterValue . '%');
                    }
                }
            }
        } else {
            $this->template->filterActive = FALSE;
            $filterString = NULL;
            if ($idParent != NULL) {
                $dataItems = $dataItems->where($this->parentLink . ' = ?', $idParent);
            }
            //else
            //$totalItems = $this->DataManager->findAll();
        }

        /*17.03.2021 - saved user filters*/
/*      //03.04.2022 - probably no reason for using mySection for savedFilters
         $mySection = $this->getSession('baselistFilter');
        if (isset($mySection['savedFilters'])) {
            $this->template->savedFilter = $mySection['savedFilters'];
        } else {
            $this->template->savedFilter = [];
        }*/


        if (!is_null($this->pdFilterIndex)) {
            if (!is_null($this->pdFilter[$this->pdFilterIndex]['filter'])) {
                $this->template->filterActive = TRUE;
                $this->template->pdFilterName = $this->pdFilter[$this->pdFilterIndex]['label'];
                $dataItems = $dataItems->where($this->pdFilter[$this->pdFilterIndex]['filter']);
                if (isset($this->pdFilter[$this->pdFilterIndex]['sum'])) {
                    foreach ($this->pdFilter[$this->pdFilterIndex]['sum'] as $keyPd => $onePd) {
                        $this->template->pdSum[$onePd] = $dataItems->sum($keyPd);
                    }
                    $this->template->pdCurr = $this->settings->cl_currencies['currency_code'];
                }
            }
        }
        //end of data preparation

        return $dataItems;
    }

    private function gridSet()
    {
        // grid and edit settings to template

        if ($gridSet = $this->TablesSettingManager->findBy(['cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn])->fetch()) {
            $tmpGridSet = json_decode($gridSet['grid_columns'], true);
            $tmpSavedFilter = json_decode($gridSet['saved_filters'], true);


            //die;
            if (!array_key_exists('order', $tmpGridSet)) {
                $counter = 0;
                foreach ($this->dataColumns as $key => $one) {
                    $dataGrid[$key] = TRUE;
                    $counter++;
                }
                $tmpGridSet['order'] = $dataGrid;
                $gridSet->update(['grid_columns' => json_encode($tmpGridSet)]);
            }else{
                $dataGrid = $tmpGridSet['order'];
                $counter = 0;
                //bdump($dataGrid);
                foreach ($this->dataColumns as $key => $one) {
                  //  bdump($key);
                   // bdump($one);
                    if (!array_key_exists($key, $dataGrid)) {
                        $dataGrid[$key] = TRUE;
                        $counter++;
                    }
                }
               // bdump($dataGrid);
               // bdump($counter);
                if ($counter > 0) {
                    //bdump($dataGrid);
                    $tmpGridSet['order'] = $dataGrid;
                    $gridSet->update(['grid_columns' => json_encode($tmpGridSet)]);
                }
            }
            bdump($tmpGridSet, 'tady');
            $this->template->gridSet = $tmpGridSet['order'];
            //dump($tmpGridSet['order']);
            //die;
            //$this->template->editSet = json_decode($gridSet['edit_columns'],true);
            $this->template->sumsHover = $gridSet['hover_sum'];
            $this->template->savedFilter = $tmpSavedFilter;

            if ($gridSet['grid_rows'] <= 0 || $gridSet['grid_rows'] > 500)
                $this->template->gridRows = 30;
            else
                $this->template->gridRows = $gridSet['grid_rows'];

            $this->gridRows = $this->template->gridRows;
            $this->enableAutoPaging = $gridSet['enable_autopaging'];
            $this->template->enableAutoPaging = $this->enableAutoPaging;

        } else { //settings are empty, by default create new one
            //new setting
            $data = new \Nette\Utils\ArrayHash;
            $data['cl_users_id'] = $this->user->getId();
            $data['table_name'] = $this->DataManager->getTableName() . $this->tableNameAddOn;
            $counter = 0;
            foreach ($this->dataColumns as $key => $one) {
                $dataGrid[$key] = TRUE;
                $counter++;
                //if ($counter > 13) {
                //    break;
                //}
            }
            $data['grid_columns'] = json_encode(['order' => $dataGrid]);
            $data['grid_rows'] = 30;
            $data = $this->TablesSettingManager->insert($data);
            $this->template->gridSet = json_decode($data['grid_columns'], true)['order'];
            $this->template->sumsHover = $data['hover_sum'];
            $this->template->gridRows = $data['grid_rows'];
            $this->gridRows = $this->template->gridRows;
            $this->enableAutoPaging = true;
            $this->template->enableAutoPaging = $this->enableAutoPaging;
            //$this->template->editSet = json_decode($gridSet['edit_columns'],true);
        }
    }

    private function checkPage($tmpFinalData, $page_b, $paginator)
    {


    }

    public function handleSelectFilter($filterId)
    {
        $data = $this->TablesSettingManager->findBy(array('cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn))->fetch();
        if ($data) {
            $dataSaved = json_decode($data['saved_filters'], true);
            $mySection = $this->getSession('baselistFilter');
            //  bdump($mySection);
            //  bdump($dataSaved);
            if (isset($dataSaved[$filterId]['filter'])) {
                $mySection['filter'] = $dataSaved[$filterId]['filter'];
                foreach ($dataSaved[$filterId]['filter'] as $key => $one) {

                    $this->filterColumn = $key;
                    $this->filterValue = $one;
                    break;
                }
                //    bdump($this->filterColumn);
                //    bdump($this->filterValue);
            } else {
                if (isset($dataSaved[$filterId]['cxs'])) {
                    $this->redirect('default', array('filterValue' => $dataSaved[$filterId]['__global_filter'], 'cxs' => $dataSaved[$filterId]['cxs']));
                } else {
                    $this->redirect('default', array('filterValue' => $dataSaved[$filterId]['__global_filter']));
                }

            }


        }

        $this->redrawControl('content');
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
    }


    public function handleSaveFilter($filterValue = "", $filterColumn = "", $cxs = 0)
    {
        $mySection = $this->getSession('baselistFilter');
        //unset($mySection['filter']);
        //$mySection['savedFilters']
        $data = $this->TablesSettingManager->findBy(array('cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn))->fetch();
        if (!$data) {
            //new setting
            $data = new \Nette\Utils\ArrayHash;
            $data['cl_users_id'] = $this->user->getId();
            $data['table_name'] = $this->DataManager->getTableName() . $this->tableNameAddOn;
            $data = $this->TablesSettingManager->insert($data);
        }
        //bdump($mySection['filter']);
        //update setting
        $dataSaved = json_decode($data['saved_filters'], true);
        $tmpNow = new DateTime();
        if (!empty($filterColumn)) {
            $dataSaved[] = array('name' => 'filtr ' . $tmpNow->format('d.m.Y H:i'), 'filter' => $mySection['filter']);
        } else {
            $dataSaved[] = array('name' => 'filtr ' . $tmpNow->format('d.m.Y H:i'), '__global_filter' => $filterValue, 'cxs' => $cxs);
        }
        //bdump($mySection['savedFilters']);
        // bdump($dataSaved);
        $data = $this->TablesSettingManager->update(array('id' => $data['id'], 'saved_filters' => json_encode($dataSaved)));
        $this->flashMessage('Filtr byl uložen', 'success');
        $this->redrawControl('content');
    }

    public function handleRenameFilter($filterId, $name)
    {
        $mySection = $this->getSession('baselistFilter');
        $data = $this->TablesSettingManager->findBy(array('cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn))->fetch();
        if ($data) {
            //update setting
            $dataSaved = json_decode($data['saved_filters'], true);
            bdump($dataSaved);
            if (isset($dataSaved[$filterId]['filter'])) {
                $dataSaved[$filterId] = array('name' => $name, 'filter' => $dataSaved[$filterId]['filter']);
            } else {
                $dataSaved[$filterId] = array('name' => $name, '__global_filter' => $dataSaved[$filterId]['__global_filter']);
            }

            $data = $this->TablesSettingManager->update(array('id' => $data['id'], 'saved_filters' => json_encode($dataSaved)));
            $this->flashMessage('Filtr byl přejmenován', 'success');
        } else {
            $this->flashMessage('Filtr nebyl přejmenován', 'warning');
        }
        $this->redrawControl('content');
    }

    public function handleRemoveFilter($filterId)
    {
        $mySection = $this->getSession('baselistFilter');
        $data = $this->TablesSettingManager->findBy(array('cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn))->fetch();
        if ($data) {
            //update setting
            $dataSaved = json_decode($data['saved_filters'], true);
            unset($dataSaved[$filterId]);
            $data = $this->TablesSettingManager->update(array('id' => $data['id'], 'saved_filters' => json_encode($dataSaved)));
            $this->flashMessage('Filtr byl vymazán', 'success');
        } else {
            $this->flashMessage('Filtr nebyl vymazán', 'warning');
        }

        $this->redrawControl('content');
    }


    public function handleDelete($id)
    {
        try {
            $this->mainDelete($id);
            $this->flashMessage('Záznam byl vymazán.', 'success');
            $this->id = NULL;
            $this->bscId = NULL;
            //$this->redirect('this');
            $this->redrawControl('content');
        } catch (Exception $e) {
            if (isset($e->errorInfo[1]) && $e->errorInfo[1] == 1451)
                $errorMess = 'Záznam nebylo možné vymazat, protože k němu existují podřízené záznamy.';
            else
                $errorMess = $e->getMessage();

            Debugger::log($e->getMessage(), 'eraseHandle');
            $this->flashMessage($errorMess, 'danger');
        }
    }

    public function mainDelete($id)
    {

            $tmpData = $this->DataManager->find($id);
            if ($this->DataManager->isLockable() && $tmpData['locked'] == 1)
                throw new Exception('Záznam nebylo možné vymazat, protože je uzamčen.');

            if (isset($tmpData['cl_number_series_id']) && $this->DataManager->findAll()->max('id') == $id) {
                $cl_number_series_id = $tmpData['cl_number_series_id'];
            } else {
                $cl_number_series_id = NULL;
            }

            if ($this->beforeDeleteBaseList($id, $tmpData)) {
                $this->deleteFiles($id);
                $this->DataManager->delete($id);
            } else{
                throw new Exception('Záznam nebylo možné vymazat, protože je používán v jiné části aplikace.', 1451);
            }

            $this->afterDeleteBaseList($tmpData);
            if (!is_null($cl_number_series_id)) {
                //13.07.2016 - ponizit ciselnou radu, jen pokud mazeme posledni zaznam
                $this->NumberSeriesManager->lowerNumber($cl_number_series_id);
            }
    }

    private function deleteFiles($id)
    {
        //08.08.2018 - check if is key in cl_files
        //and erase files physicaly and remove from cl_files
        if ($tmpFiles = $this->FilesManager->findField($this->mainTableName . "_id")) {

            if ($files = $this->FilesManager->findAll()->where($this->mainTableName . "_id = ?", $id)) {
                foreach ($files as $key => $one) {
                    $fileDel = __DIR__ . "/../../../data/files/" . $one->file_name;

                    if (file_exists($fileDel))
                        unlink($fileDel);

                    $one->delete();
                }

            }
        }

    }


    public function handleNew($data = '', $defData)
    {
        //bdump($this->numberSeries);
        if (!$this->isAllowed($this->name, 'write')) {
            $this->flashMessage($this->translator->translate('Ke zvolené akci nemáte oprávnění!'), 'danger');
            $this->redrawControl('flash');
            $this->redrawControl('content');
            return;
        }

        if (!is_array($defData)) {
            $defData = json_decode($defData, true);
        }
        if (!is_array($defData)) {
            $defData = [];
        }
        if ($this->beforeNew()) {
            //bdump($data);
            //bdump($defData);
            //die;
            //18.07.2019 - use given cl_number_series_id (e.g. different number_series for company branch)
            //bdump(in_array('cl_number_series_id', $this->numberSeries));

            if (array_key_exists('cl_number_series_id', $defData)) {
                $this->numberSeries['cl_number_series_id'] = $defData['cl_number_series_id'];
            }
          //  bdump($this->numberSeries);
//            die;
            if (!is_null($this->numberSeries) && isset($this->numberSeries['cl_number_series_id']) && !is_null($this->numberSeries['cl_number_series_id'])) {

                $data = $this->getNumberSeries($data, $this->numberSeries['cl_number_series_id']);

            } elseif (!empty($data)) {
                $data = $this->getNumberSeries($data);
            } else {
                $data = $this->getNumberSeries();
            }
            //bdump($data);
            //die;
            /*if there is defined number series, we must use it
             *
             */

            $arrData = $this->DataProcessMain($this->defValues, $data); //if must be changes in default data, we can do it here
            //bdump($this->defValues);
            //bdump($arrData);
            //if (count($defData) > 0)
            foreach ($defData as $key => $one) {
                //$arrData[$defData['key']] = $defData['value'];
                $arrData[$key] = $one;
            }
            //bdump($arrData);

            $row = $this->DataManager->insert($arrData);

            $this->afterNew($row);

            if ($this->bscOff || !$this->bscEnabled) {
                $this->redirect('edit', ['id' => $row->id, 'copy' => FALSE, 'roModal' => FALSE, 'dataGiven' => $defData]);
            } else {
                //05.02.2019 - switch active page to card
                $key = 'card';
                foreach ($this->bscPages as $key2 => $one) {
                    $this->bscPages[$key2]['active'] = false;
                }
                $this->bscPages[$key]['active'] = true;
                $this->bscPagesActive = $key;
                //$this->id = $id;
                $mySection = $this->getSession($this->name . '-tabbsc');
                $mySection['key'] = $key;
                $mySection['scrollTo'] = ".btn-success";
                $mySection['select2Focus'] = '#frm-edit-cl_partners_book_id';
                $this->redirect('default', ['id' => $row->id, 'copy' => FALSE, 'filterValue' => '', 'filterString' => '']);
            }

        } else {

        }
    }

    public function getNumberSeries($data = '', $idNs = NULL)
    {
        if (!$this->numberSeries) {
            return $data;
        }
        //bdump($this->numberSeries);
        //die;
        $data = $this->NumberSeriesManager->getNewNumberSeries($this->numberSeries, $idNs);
        //bdump($data);
        if (!is_null($data['cl_status_id'])) {
            $this->defValues['cl_status_id'] = $data['cl_status_id'];
        }
        if (isset($data['cl_invoice_types_id'])) {
            $this->defValues['cl_invoice_types_id'] = $data['cl_invoice_types_id'];
        }
        if (isset($data['header_txt'])) {
            $this->defValues['header_txt'] = $data['header_txt'];
        }
        if (isset($data['footer_txt'])) {
            $this->defValues['footer_txt'] = $data['footer_txt'];
        }
        $this->defValues[$this->numberSeries['table_key']] = $data[$this->numberSeries['table_key']];
        $this->defValues[$this->numberSeries['table_number']] = $data[$this->numberSeries['table_number']];
        //bdump($this->defValues);
        //bdump($data);
        //die;
        return $data;
    }

    /**force update of header and footer
     * @param $cl_partners_book_id
     */
    public function handleUpdateHeaderFooter($cl_partners_book_id, $header = TRUE, $footer = TRUE)
    {
        $tmpData = $this->PartnersManager->findAll()->where('id = ?', $cl_partners_book_id)->limit(1);
        foreach ($tmpData as $one) {
            $this->PartnersManager->useHeaderFooter($this->id, $one->id, $this->DataManager, TRUE, $header, $footer);
        }
        $this->redrawControl('content');
    }


    public function handleEdit($id, $copy, $roModal = FALSE)
    {
        if ($copy) {
            if ($defData = $this->DataManager->findOneBy(array('id' => $id))) {
                $arrCopy = $defData->toArray();
                if (isset($this->numberSeries['use'])) {
                    if ($data2 = $this->NumberSeriesManager->getNewNumber($this->numberSeries['use'], $defData->cl_number_series_id, NULL)) {
                        $arrCopy[$this->numberSeries['table_key']] = $data2['id'];
                        $arrCopy[$this->numberSeries['table_number']] = $data2['number'];
                    }
                }
                $arrCopy = $this->DataProcessMain($arrCopy, '');

                //Debugger::fireLog($data);
                $arrCopy['id'] = '';
            }
            //$this->redirect('edit',$id,FALSE);
            $arrCopy = $this->beforeCopy($arrCopy);
            $row = $this->DataManager->insert($arrCopy);
            $this->id = $row['id'];
            $this->afterCopy($row->id, $id);
            $id = $row->id;
        }
        //dump($roModal);
        //die;
        if ($this->bscOff || $this->bscEnabled == FALSE) {
            $this->redirect('edit', array('id' => $id, 'copy' => FALSE, 'roModal' => $roModal));
        } else {
            $this->id = $id;
            $this->redrawControl('content');
        }
    }


    public function handleShowBsc($key, $id)
    {

        $this->id = $id;
        //11.08.2019 - save selected row->id to session, because of in handleSort we don't have current row->id. Table and header with sort links  is not redrawed
        $mySection = $this->getSession($this->name . '-id');
        $mySection['id'] = $id;

        //09.08.2019 !! major impact to performance - redraws main table - each line according to number of columns lasts 2-3ms on page are typicaly 30 lines = 90ms!!
        //and it is uselles at all we don't need redraw main table when showing bsc
        //$this->redrawControl('baselistArea');        //main listgrid

        $this->redrawControl('header');            //menu
        $this->redrawControl('bscArea');            //child tables
        $this->redrawControl('bsc');            //child tables
        $this->redrawControl('pairedDocs2');        //control with pairedDocs

        $this->redrawControl('baselistScripts');    //scripts needed for listgrid
        $this->redrawControl('bsc-child');        //child tables

    }


    public function handleTabBsc($key, $id)
    {
        foreach ($this->bscPages as $key2 => $one) {
            $this->bscPages[$key2]['active'] = false;
        }
        $this->bscPages[$key]['active'] = true;
        $this->bscPagesActive = $key;
        $this->id = $id;
        $mySection = $this->getSession($this->name . '-tabbsc');
        $mySection['key'] = $key;

        //$this->redrawControl('bscArea');        //main child tables
        //$this->redrawControl('bsc');            //child tables
        //$this->redrawControl('pairedDocs2');        //control with pairedDocs
        //$this->redrawControl('baselistScripts');    //scripts needed for listgrid
        //$this->redrawControl('bsc-child');        //child tables
        $this->redrawControl('bsc-toolbar');        //child toolbar

    }


    public function handleSort($sortKey, $sortOrder)
    {
        $this->sortKey = $sortKey;
        $this->sortOrder = $sortOrder;
        $mySection = $this->getSession($this->name . '-id');
        $this->id = $mySection['id'];
        //$this->redirect('default');
        //$this->redrawControl('paginator');
        //$this->redrawControl('baselist');
        //$this->redrawControl('baselistArea');
        $this->redrawControl('content');
    }

    protected function createComponentUserFilter($name)
    {
        $form = new Form($this, $name);
        $form->setMethod('GET');
        $form->addHidden('filterColumn', NULL);
        //$translator = clone $this->translator->setPrefix([]);
        $translator = $this->translator;
        $form->addText('filterValue', $translator->translate('Hledat'), 20, 50)
            ->setHtmlAttribute('placeholder', $translator->translate('Hledaný_text_a_poté_Enter'));
        $form->addCheckbox('cxs', "obsah");
        $form->addSubmit('send', $translator->translate('Hledat'))
            ->setHtmlAttribute('class', 'btn btn-primary default-btn');
        /*$form->addSubmit('back', 'X')
            ->setHtmlAttribute('class', 'btn btn-primary default-btn');*/
        $form->onSuccess[] = array($this, 'userFilterSubmitted');
        return $form;
    }

    public function handleResetFilter()
    {
        $mySection = $this->getSession($this->name . '-id');
        $this->id = $mySection['id'];
        $this->id = null;
        $this->userFilterVal = NULL;
        $this->cxs = NULl;
        $this->pdFilterIndex = null;
        $mySection = $this->getSession('baselistFilter');
        unset($mySection['filter']);

        //bdump($this->pdFilterIndex);
        // die;
        $this->filterValue = NULL;
        $this->redirect('default', array('filterValue' => NULL, 'cxs' => NULL, 'id' => $this->id));
    }

    public function userFilterSubmitted(Form $form)
    {
        //if ($form['send']->isSubmittedBy())
        //{
        $mySection = $this->getSession($this->name . '-id');
        $this->id = $mySection['id'];
        $this->id = null;
        $data = $form->values;
        $this->redirect('default');
        //}
    }


    public function handlePdFilter($index)
    {
        $this->pdFilterIndex = $index;
        $this->redrawControl('content');
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
    }


    public function handleFilterColumns($filterColumn, $filterValue)
    {
        if ($filterValue == '') {
            //$filterValue = '';
            //$filterColumn = '';
        }

        $this->filterColumn = $filterColumn;
        $this->filterValue = $filterValue;

        $this->redrawControl('content');
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
    }

    public function handleFilterReset()
    {
        $this->filterColumn = '';
        $this->filterValue = '';
        $this->pdFilterIndex = NULL;
        $mySection = $this->getSession('baselistFilter');
        unset($mySection['filter']);
        //$this->redrawControl('baselist');
        //$this->redrawControl('baselistArea');
        $this->redirect('default');
    }

    public function handleSaveHeaderSize($table_name, $header_id, $size)
    {
        //bdump($header_id,'header_id');
        //bdump($size,'size');
        $this->UserManager->saveTable('size', $table_name, $header_id, $size, NULL, $this->user->getId());
        //$this->terminate();
        $this->redrawControl('content');
    }

    public function handleSaveTableHeight($table_name, $height)
    {
        //bdump($header_id,'header_id');
        //bdump($size,'size');
        $mySection = $this->getSession($this->name . '-id');
        $this->bscId = $mySection['id'];
        $this->id = $mySection['id'];
        $this->UserManager->saveTable('tableheight', $table_name, NULL, NULL, NULL, $this->user->getId(), $height);

        $this->redrawControl('content');
    }


    /*set show or hide of column*/
    public function handleGridSet($key, $value, $order = 0)
    {
        if ($data = $this->TablesSettingManager->findBy(['cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn])->fetch()) {
            //update setting
            $dataGrid = json_decode($data['grid_columns'], true);
            if (isset($dataGrid['order'][$key])) {
                $dataGrid['order'][$key] = $value;
            } else {
                $newOrder = [];
                $i = 0;
                foreach ($dataGrid['order'] as $key2 => $one2) {
                    $i++;
                    if ($i == $order) {
                        $newOrder[$key] = $value;
                    }
                    $newOrder[$key2] = $one2;
                }
                $dataGrid['order'] = $newOrder;
            }

            $data = $this->TablesSettingManager->update(['id' => $data['id'], 'grid_columns' => json_encode($dataGrid)]);
        } else {
            //new setting
            $data = [];
            $data['cl_users_id'] = $this->user->getId();
            $data['table_name'] = $this->DataManager->getTableName() . $this->tableNameAddOn;
            $dataGrid['order'][$key] = $value;
            $data['grid_columns'] = json_encode($dataGrid);
            $data = $this->TablesSettingManager->insert($data);
        }
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
        $this->redrawControl('baselistSetting');
        $this->redrawControl('baselistScripts');


        //$this->redrawControl('content');
    }

    public function handleEditSet($key, $value)
    {
        if ($data = $this->TablesSettingManager->findBy(['cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn])->fetch()) {
            //new setting
            $dataGrid = json_decode($data['edit_columns'], true);
            $dataGrid[$key] = $value;
            $data = $this->TablesSettingManager->update(['id' => $data['id'], 'edit_columns' => json_encode($dataGrid)]);
        } else {
            //update setting
            $data = [];
            $data['cl_users_id'] = $this->user->getId();
            $data['table_name'] = $this->DataManager->getTableName() . $this->tableNameAddOn;
            $dataGrid[$key] = $value;
            $data['edit_columns'] = json_encode($dataGrid);
            $data = $this->TablesSettingManager->insert($data);
        }
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
    }

    public function handleNewPage($page_b)
    {
        //$this->redrawControl('baselist');
        //$this->redrawControl('baselistArea');
        $this->redrawControl('content');
    }

    //aditional processing of data from listgrid
    public function DataProcessListGrid($data)
    {
        if (isset($data['cl_pricelist_id']) && $data['cl_pricelist_id'] == 0) {
            $data['cl_pricelist_id'] = NULL;
        }

        return $data;

    }

    //validating of data from listgrid
    public function DataProcessListGridValidate($data)
    {
        return NULL;
    }

    //aditional processing data after save in listgrid
    public function afterDataSaveListGrid($dataId, $name = NULL)
    {

    }

    //aditional processing of default data in main data
    public function DataProcessMain($defValues, $data)
    {
        return $defValues;
    }

    //aditional function called before insert new record
    public function beforeNew()
    {
        return TRUE;
    }

    //aditional function called just after insert new record
    public function afterNew($row = FALSE)
    {
        return TRUE;
    }

    //aditional function called before insert copied record
    public function beforeCopy($data)
    {
        return $data;
    }

    //aditional function called after inserted copied record
    public function afterCopy($newLine, $oldLine)
    {
        return TRUE;
    }

    //aditional control before addline from listgrid
    public function beforeAddLine($data)
    {
        return $data;
    }


    //aditional control before delete from listgrid
    public function beforeDelete($lineId)
    {
        return TRUE;
    }

    //aditional action after delete from listgrid
    public function afterDelete($line)
    {
        return TRUE;
    }

    //aditional control before delete from baseList
    public function beforeDeleteBaseList($id)
    {
        return TRUE;
    }

    //aditional action after delete from baseList
    public function afterDeleteBaseList($line)
    {
        return TRUE;
    }

    //02.02.2019 - update sum moved from presenters (invoice, commmision, offer, invoicearrived
    //and is called by paretn::updateSum();
    public function updateSum()
    {
        $this->redrawControl('baselistArea');
        $this->redrawControl('baselist');
        $this->redrawControl('bscArea');
        $this->redrawControl('bsc-child');
        // $this->redrawControl('bscAreaEdit');
        $this->redrawControl('baselistScripts');    //scripts needed for listgrid
        //$this->redrawControl('editLines');
        if (isset($this['sumOnDocs'])) {
            $this['sumOnDocs']->redrawControl('sumOnDocsSnp');
        }
    }

    //for switching tabs
    public function handleSwitchTab($activeTab)
    {
        $this->activeTab = $activeTab;
        $this->redrawControl('card');
        $this->redrawControl('card1');
        $this->redrawControl('card2');
        $this->redrawControl('card3');
        $this->redrawControl('flash');
    }

    public function emailSetStatus()
    {
        return;
    }

    //set status of record
    public function setStatus($id, $where)
    {
        //now set new state order
        if ($nStatus = $this->StatusManager->findAll()
            ->where($where)
            ->fetch()) {
            $tmpState = [];
            $tmpState['id'] = $id;
            $tmpState['cl_status_id'] = $nStatus;
            if ($nStatus['s_eml'] == 1) {
                $tmpState['s_eml'] = 1;
            }
            $this->DataManager->update($tmpState);
        }
    }

    public function handlePacking($id, $packed)
    {
        $this->DataManager->update(['id' => $id, 'packed' => $packed]);
        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
    }


    /*07.07.2018 - change order of column and save to cl_users.tables_settings
     *
     */
    public function handleOrderLine($idLine, $table_name, $columns)
    {
        //bdump($idLine);
        //bdump($columns);
        $arrCols = [];
        $tmpCols = json_decode($columns, true);
        foreach ($tmpCols as $one) {
            //bdump($one[0]);
            //bdump($one[1]);
            $arrCols[$one[0]] = $one[1];
        }
        //bdump($arrCols);
        $this->UserManager->saveTable('order', $table_name, NULL, NULL, $arrCols, $this->user->getId());

        $this->redrawControl('baselist');
        $this->redrawControl('baselistArea');
        $this->redrawControl('baselistScripts');
        //$this->redi('editLines');
    }

    /*08.07.2018 - Reset user settings for given table name
     * order and width of columns is ersed from cl_users.tables_settings
     */
    public function handleGridReset($table_name)
    {
        //$this->TablesSettingManager->resetTable($table_name, $this->user->getId());
        $this->UserManager->resetTable($table_name, $this->user->getId());
        //$this->redrawControl('baselist');
        //$this->redrawControl('baselistArea');
        //$this->redrawControl('baselistScripts');
        $this->redirect('this');
    }

    /*11.11.2021 - set number of rows for page
    */
    public function handleSetGridRows($table_name, $gridRowsValue, $enableAutoPaging)
    {
        $this->UserManager->setGridRowsTable($table_name, $this->user->getId(), $gridRowsValue, $enableAutoPaging);
        $this->redirect('this');
    }


    /** hide quicksum
     *
     */
    public function handleQSumHide()
    {
        $this->UserManager->updateUser(array('id' => $this->user->getId(), 'quick_sums' => 0));
        $this->user->identity->quick_sums = 0;
        $this->redrawControl('content');
    }

    public function handleLock()
    {
        if ($this->isAllowed($this->name, 'edit')) {
            $this->DataManager->update(array('id' => $this->id, 'locked' => 1));
        } else {
            $this->flashMessage($this->translator->translate('Ke zvolené akci nemáte oprávnění!'), 'danger');
        }
        $this->redrawControl('content');
    }

    public function handleUnlock()
    {
        if ($this->isAllowed($this->name, 'edit')) {
            $this->DataManager->update(array('id' => $this->id, 'locked' => 0));
        } else {
            $this->flashMessage($this->translator->translate('Ke zvolené akci nemáte oprávnění!'), 'danger');
        }
        $this->redrawControl('content');
    }

    public function getNumberSeriesArray($form_use)
    {
        $arrRet = array('group' => '',
            'group_settings' => array('group_label' => '',
                'group_class' => 'btn btn-primary dropdown-toggle btn-sm',
                'group_title' => 'další číselné řady', 'group_icon' => 'iconfa-print',
                'btn_group_name' => 'new'),
        );
        $i = 0;
        $tmpGroup = array();
        $tmpNumberSeries = $this->NumberSeriesManager->findAll()->where(array('form_use' => $form_use))->order('form_name')->fetchAll();
        foreach ($tmpNumberSeries as $nsKey => $nsOne) {
            $tmpGroup[$i] = array('url' => $this->link('new!', array('data' => $form_use, 'defData' => json_encode(array('cl_number_series_id' => $nsOne->id)))), 'rightsFor' => 'write', 'label' => $nsOne->form_name, 'class' => '', 'icon' => '');
            $i++;
        }
        $arrRet['group'] = $tmpGroup;

        //bdump($arrRet);
        return ($arrRet);
    }

    /**Return array of quantity and prices for use in listgrid.latte javascript in case of changing quantity
     * @param $arr
     * @return array
     */
    public function getQPrices($arr)
    {
        //bdump($arr);
        //cl_pricelist_id => 19764
        //cl_delivery_note.cl_currencies_id => 1
        //cl_pricelist.price => 19.9
        $newArr = [];

        foreach ($arr as $key => $one) {
            $arrKeyName = str_getcsv($key, '.');
            if (count($arrKeyName) > 1) {
                $newKey = $arrKeyName[1];
            } else {
                $newKey = $arrKeyName[0];
            }
            $newArr[$newKey] = $one;
        }

        //16.11.2021 - if customer has his own pricelist for this item, then return empty array
        $cl_partners_book_id = (is_null($newArr['cl_partners_book_id']) || !isset($newArr['cl_partners_book_id'])) ? 0 : $newArr['cl_partners_book_id'];
        $tmpPartnersPrice = $this->PriceListPartnerManager->findAll()->where('cl_pricelist_id = ? AND cl_partners_book_id = ? AND cl_currencies_id = ?', $newArr['cl_pricelist_id'], $cl_partners_book_id, $newArr['cl_currencies_id'])->fetch();
        //bdump($newArr);
        //bdump($tmpPartnersPrice);
        if (!$tmpPartnersPrice) {
            if (!is_null($newArr['cl_pricelist_id']) && !is_null($newArr['cl_currencies_id'])) {
                $arrPrices = $this->PricesManager->findAll()->where('cl_pricelist_id = ? AND cl_currencies_id = ?', $newArr['cl_pricelist_id'], $newArr['cl_currencies_id'])->
                order('price_multiplier')->
                fetchPairs('price_multiplier', 'price');
            } else {
                $arrPrices = [];
            }
            //add default price
            $arrDefault = ['0' => $newArr['price']];
            $newArr = $arrDefault + $arrPrices;
        } else {
            $newArr = [];
        }

        //$as = asort($newArr);

        return $newArr;
    }


    public function handleGetCurrencyRate($idCurrency, $date = null)
    {
        $tempDirectory = __DIR__ . '/../../temp';
        $cnb = new \CnbApi\CnbApi($tempDirectory);
        //$cnb = new \CnbApi\CnbApi();

        if ($rate = $this->CurrenciesManager->findOneBy(['id' => $idCurrency])) {
            if ($rate->fix_rate == 0) {
                //  try {
                $dtmNow = new \DateTime();
                $date = new \DateTime($date);
                //bdump($date);
               /* if (is_null($rate['dtm_rate']) || ($rate['dtm_rate']->setTime(0,0) == $date->setTime(0,0) && (int)$rate['dtm_rate']->format('Hi') <= 1430)) {
                    $tmpStorage = new FileStorage($tempDirectory);
                    $cacheKey = $date->format('Y-m-d');
                    $cache = new Cache($tmpStorage, 'CnbApi.Entity');
                    $cacheRet = $cache->remove($cacheKey);
                }*/

                $tmpCurrency = $cnb->findRateByCode($rate->currency_code, $date);
                $numRate = $tmpCurrency->getRate();

                $rate->update(['rate' => $numRate, 'amount' => $tmpCurrency->getAmount(), 'dtm_rate' => $dtmNow]);
                //   }catch (Exception $e) {
                //       $errorMess = $e->getMessage();
                //       $this->flashMessage('Chyba při získávání aktuálního kurzu.','Error');
                //       $this->flashMessage($errorMess,'Error');
                //   }

            } else {
                $numRate = $rate->fix_rate;
            }
            echo($numRate);

        } else {
            echo(0);
        }
        //in future there can be another work with rates

        $this->terminate();
    }

    public function handleHoverSum($value)
    {
        bdump($value);
        if ($gridSet = $this->TablesSettingManager->findBy(['cl_users_id' => $this->user->getId(),
            'table_name' => $this->DataManager->getTableName() . $this->tableNameAddOn])->fetch()) {

            //bdump(array('id' => $gridSet['id'], 'hover_sum' => $value));
            $gridSet->update(['id' => $gridSet['id'], 'hover_sum' => $value]);
        }

    }

    public function handleScrollTop($page_b, $filterValue, $index)
    {
        $this->page_b = $page_b;
        $this->id = null;
        //$this->filter = $filterValue;
        $this->filterValue = $filterValue;
        $this->pdFilterIndex = $index;
        $this->redrawControl('baselistArea');        //main listgrid
        $this->redrawControl('paginator_top');
        $this->redrawControl('my_table');
    }

    public function handleScrollBottom($page_b, $filterValue, $index)
    {
        $this->page_b = $page_b;
        $this->id = null;
        //$this->filter = $filterValue;
        $this->filterValue = $filterValue;
        $this->pdFilterIndex = $index;
        //bdump($this->filterValue);
        $this->redrawControl('baselistArea');        //main listgrid
        $this->redrawControl('paginator_top');
        $this->redrawControl('my_table');
    }

    public function handlePaginatorUpdate($page_b, $filterValue, $index)
    {
        $this->page_b = $page_b;
        $this->id = null;
        //$this->filter = $filterValue;
        $this->filterValue = $filterValue;
        $this->pdFilterIndex = $index;
        $this->redrawControl('baselistArea');        //main listgrid
        $this->redrawControl('paginator_top');
    }

    /** sort items of cl_...._items
     * @param $sortBy
     *
     */
    public function handleSortItems($sortBy, $cmpName)
    {
        if ($cmpName == "orderlistgrid") {
            $tmpItems = $this->OrderItemsManager->findAll()->where('cl_order_id = ?', $this->id);
        } elseif ($cmpName == "storeListgrid") {
            $tmpItems = $this->StoreMoveManager->findAll()->where('cl_store_docs_id = ?', $this->id);
        } elseif ($cmpName == "invoicelistgrid") {
            $tmpItems = $this->InvoiceItemsManager->findAll()->where('cl_invoice_id = ?', $this->id);
        } elseif ($cmpName == "invoiceBacklistgrid") {
            $tmpItems = $this->InvoiceItemsBackManager->findAll()->where('cl_invoice_id = ?', $this->id);
        } elseif ($cmpName == "listgridSel") {
            $tmpItems = $this->CommissionItemsSelManager->findAll()->where('cl_commission_id = ?', $this->id);
        } else {
            $this->flashMessage('Není definován zdroj pro BaseListPresenter.handleSortItems', 'warning');
            return;
        }

        $items = $tmpItems->order($sortBy);
        $i = 1;
        foreach ($items as $key => $one) {
            $one->update(array('item_order' => $i));
            $i++;
        }
        $this[$cmpName]->redrawControl('paginator');
        $this[$cmpName]->redrawControl('editLines');
    }

    public function handleBack()
    {
        if (isset($mySection['url']) && !is_null($mySection['url']))
            $this->redirectUrl($mySection['url']);
        else
            $this->redirect('default');
    }

    protected function createComponentPreviewContent()
    {
        return new \Controls\PreviewContent($this->previewLatteFile);
    }


    protected function createComponentHistory()
    {
        return new \Controls\HistoryControl($this->HistoryManager, $this->id, $this->dataColumns, $this->DataManager, $this->accessor);
    }


    public function handleShowHistory($id)
    {
        $this['history']->setId($id);
        $this['history']->setTableName($this->mainTableName);
        /* if ($dataColumns){
             $this['history']->setDataColumns($dataColumns);
         }*/
        $this->showHistory = TRUE;
        $this->redrawControl('historyContent');
        $this->redrawControl('showHistory');
    }

    public function handleShowQuery($index)
    {
        $this->sqlQueryIndex = $index;
        $mySection = $this->getSession('sqlQuery');
        $mySection['sqlQueryIndex'] = $index;
        $this->showModal('queryModal');
        $this->redrawControl('baselistArea');
        $this->redrawControl('queryModal');
    }


    protected function createComponentQuery($name)
    {

        $form = new Form($this, $name);
        $form->addHidden('sqlQueryIndex', $this->sqlQueryIndex);
        $mySection = $this->getSession('sqlQuery');
        $this->sqlQueryIndex = $mySection['sqlQueryIndex'];
        if (!is_null($this->sqlQueryIndex) && count($this->sqlQuery) > 0) {
            foreach ($this->sqlQuery[$this->sqlQueryIndex]['inputs'] as $key => $one) {

                if ((isset($one['values']) || isset($one['valuesFunction']))) {
                    //made select input
                    if (strpos($key, '.')) {
                        $tmpKey = substr($key, 0, strpos($key, '.')) . "_id";
                    } else
                        $tmpKey = $key;

                    $valuesToFill = $one['values'];
                    if (isset($one['getValues'])) {
                        $valuesToFill = $one['getValues'](1);
                    }
                    $form->addSelect($tmpKey, $one[0], $valuesToFill)
                        ->setPrompt($this->translator->translate('vyberte'))
                        ->setHtmlAttribute('class', 'form-control input-sm chzn-select')
                        ->setHtmlAttribute('placeholder', $one[0]);


                } else {
                    //made text input
                    if (strpos($key, '.'))
                        $tmpKey = str_replace('.', '__', $key);
                    else
                        $tmpKey = $key;

                    $tmpFormat = $this->sqlQuery[$this->sqlQueryIndex]['formats'][$key];
                    if ($tmpFormat == 'boolean') {
                        $form->addCheckbox($tmpKey)
                            ->setHtmlAttribute('class', 'form-control input-sm  newline checkboxListGrid');
                    } elseif ($tmpFormat == 'textarea-formated') {
                        $form->addTextArea($tmpKey, $one, $one['size'], $one['rows'])
                            ->setHtmlAttribute('class', 'form-control input-sm trumbowyg-edit')
                            ->setHtmlAttribute('placeholder', $one);
                    } elseif ($tmpFormat == 'textarea') {
                        $form->addTextArea($tmpKey, $one, $one['size'], $one['rows'])
                            ->setHtmlAttribute('class', 'form-control input-sm')
                            ->setHtmlAttribute('placeholder', $one[0]);
                    } elseif ($tmpFormat == 'html') {
                        $form->addTextArea($tmpKey, $one)
                            ->setHtmlAttribute('class', 'form-control dd input-sm')
                            ->setHtmlAttribute('placeholder', $one);
                    } elseif ($tmpFormat == 'date') {
                        $tmpNow = new DateTime();
                        $form->addText($tmpKey, $one)
                            ->setDefaultValue($tmpNow->format('d.m.Y'))
                            ->setHtmlAttribute('class', 'form-control input-sm datepicker')
                            ->setHtmlAttribute('placeholder', $one);

                    } else {

                        if (isset($one['size']))
                            $form->addText($tmpKey, $one, $one['size'])
                                ->setHtmlAttribute('class', 'form-control input-sm')
                                ->setHtmlAttribute('placeholder', $one);
                        else
                            $form->addText($tmpKey, $one)
                                ->setHtmlAttribute('class', 'form-control input-sm')
                                ->setHtmlAttribute('placeholder', $one);

                        if (isset($one['decplaces'])) {
                            //Debugger::fireLog($one['autonumeric-m-dec']);
                            $form[$tmpKey]->setHtmlAttribute('data-m-dec', $one['decplaces']);
                        }

                        if (isset($one['autocomplete'])) {
                            $form[$tmpKey]->setHtmlAttribute('autocomplete', $one['autocomplete']);
                        }

                    }
                }
            }
        }


        $form->addSubmit('back', $this->translator->translate('Zpět'))
            ->setValidationScope([])
            ->setHtmlAttribute('class', 'btn btn-sm btn-warning')
            ->onClick[] = array($this, 'stepBack');
        $form->addSubmit('send', $this->translator->translate('Spustit_dotaz'))
            ->setHtmlAttribute('class', 'btn btn-success btn-sm');
        $form->onValidate[] = array($this, 'LineValidate');
        $form->onSuccess[] = array($this, 'LineSubmitted');
        return $form;
    }

    public function stepBack()
    {
        $this->editIdLine = NULL;
        $this->redrawControl('editLines');
    }

    public function LineValidate(Form $form)
    {
        if ($form['send']->isSubmittedBy()) {
        }
    }

    public function LineSubmitted(Form $form)
    {
        $data = $form->values;
        if ($form['send']->isSubmittedBy()) {
            // bdump($data);
            //remove format from numbers
            foreach ($this->sqlQuery[$data['sqlQueryIndex']]['formats'] as $key => $one) {
                if (array_key_exists($key, $data)) {
                    if ($one == 'number' || $one == 'currency') {
                        $data[$key] = str_replace(' ', '', $data[$key]);
                        $data[$key] = str_replace(',', '.', $data[$key]);
                    }
                    if ($one == 'date') {
                        if ($data[$key] != '') {
                            $data[$key] = date('Y-m-d', strtotime($data[$key]));
                        } else {
                            $data[$key] = NULL;
                        }
                    }

                    if ($one == 'datetime') {
                        if ($data[$key] != '') {
                            $data[$key] = date('Y-m-d H:i:s', strtotime($data[$key]));
                        } else {
                            $data[$key] = NULL;
                        }
                    }

                    if ($one == 'datetime2') {
                        if ($data[$key] != '') {
                            $data[$key] = date('Y-m-d H:i', strtotime($data[$key]));
                        } else {
                            $data[$key] = NULL;
                        }
                    }
                    if ($one == 'text') {
                        $data[$key] = '%' . $data[$key] . '%';
                    }
                    if ($one == 'array') {
                        $data[$key] = str_getcsv($data[$key], ",");
                        if (count($data[$key]) == 0) {
                            $data[$key] = true;
                        }
                    }

                }
            }
            $tmpCond = $this->sqlQuery[$data['sqlQueryIndex']]['condition'];

            $arrInputs = $this->sqlQuery[$data['sqlQueryIndex']]['inputs'];
            $arrInputs2 = array();
            foreach ($arrInputs as $key => $one) {
                $arrInputs2[] = $data[$key];
            }
            $tmpColumns = $this->sqlQuery[$data['sqlQueryIndex']]['columns'];

            $dataResult = $this->DataManager->findAll()->where($tmpCond, $arrInputs2)->select($tmpColumns);
            $tmpAlias = $this->sqlQuery[$data['sqlQueryIndex']]['alias'];
            if (count($tmpAlias) > 0) {
                foreach ($tmpAlias as $key => $one) {
                    $dataResult = $dataResult->alias($key, $one);
                }
            }
            //bdump($dataResult->fetchAll());
            $tmpGroup = $this->sqlQuery[$data['sqlQueryIndex']]['group'];
            if ($tmpGroup != "") {
                $dataResult = $dataResult->group($tmpGroup);
            }
            if ($dataResult->count() > 0) {
                $filename = $this->sqlQuery[$data['sqlQueryIndex']]['label'];
                //$this->sendResponse(new \CsvResponse\NCsvResponse($dataResult, $filename."-" .date('Ymd-Hi').".csv",true));
                $this->sendResponse(new \XlsResponse\NXlsResponse($dataResult, $filename . "-" . date('Ymd-Hi') . ".xls", true));
            } else {
                $this->flashMessage($this->translator->translate('Data_nebyly_do_CSV_uloženy._Zadaným_podmínkám_nevyhověl_žádný_záznam.'), 'danger');
                $this->redirect('default');
            }
            $this->redrawControl('flash');
            $this->hideModal('queryModal');
            // bdump($data);
        }
    }


    /** method used before saving data
     * check if was change on number of document. In case of change and record to be saved is last, have to lower last used number
     * @param $data
     * @param $colName
     */
    protected function checkNumberSeries($data, $colName): bool
    {
        $tmpOld = $this->DataManager->find($data['id']);
        if (!$tmpOld) {
            return FALSE;
        }
        if ($tmpOld[$colName] != $data[$colName] && !is_null($tmpOld['cl_number_series_id'])) {
            //detected change in document number
            //if current record is last in number series we have to lower this number series
            $tmpLast = $this->DataManager->findAll()->where('cl_number_series_id = ?', $tmpOld['cl_number_series_id'])->order('id DESC')->limit(1)->fetch();
            if ($tmpLast && $tmpLast['id'] == $tmpOld['id']) {
                $this->NumberSeriesManager->lowerNumber($tmpOld['cl_number_series_id']);
                return TRUE;
            }
            return FALSE;
        } else {
            return FALSE;
        }


    }

    /**
     * @param array $tmpArrOrder
     * @return array
     */
    private function setColumnOrder($tmpArrOrder): array
    {
        $retDataColumns = [];
        //dump($tmpArrOrder);
        //dump(is_array($tmpArrOrder));
        //die;
        if (count($tmpArrOrder) > 0 || TRUE) {
            //bdump($tmpArrOrder);
            //18.01.2021 check if there are some new columns - this must be visible by default
            $tmpNewCols = [];
            $iNew = 0;
            foreach ($this->dataColumns as $key => $one) {
                $iNew++;
                if (!isset($tmpArrOrder[$key])) {
                    $tmpNewCols[$iNew]['key'] = $key;
                    $tmpNewCols[$iNew]['data'] = $one;
                }
            }

            $tmpDataColumns = [];
            $tmpDataColumnsAll = [];
            $iOrder = 0;
            foreach ($tmpArrOrder as $key => $one) {
                //    dump($key);
                $iOrder++;
                if (isset($tmpNewCols[$iOrder])) {
                    $tmpDataColumns[$tmpNewCols[$iOrder]['key']] = $tmpNewCols[$iOrder]['data'];
                    $tmpDataColumnsAll[$tmpNewCols[$iOrder]['key']] = $tmpNewCols[$iOrder]['data'];
                }else {
                    if (isset($this->dataColumns[$key]) && $one) {
                        $tmpDataColumns[$key] = $this->dataColumns[$key];
                    }
                    $tmpDataColumnsAll[$key] = $this->dataColumns[$key];
                }

            }
            bdump($tmpDataColumnsAll);
            bdump($tmpDataColumns);
            $retDataColumns = $tmpDataColumns;
        }

        return ['all' => $tmpDataColumnsAll, 'visible' => $retDataColumns];
    }

    public function handleSelectRecord($data)
    {
        $arrData = json_decode($data, TRUE);
        //bdump($arrData);
        $mySection = $this->session->getSection($this->name . '_checked_records');
        $mySection['checked'] = $arrData['checked'];
        $mySection['notchecked'] = $arrData['notchecked'];
        //$this->session->close();

    }

    protected function createComponentGroupActions($name)
    {
        $form = new Form($this, $name);
        $form->addselect('action', $this->translator->translate('Akce'), $this->groupActions)
            ->setPrompt($this->translator->translate('Zvolte_akci'))
            ->setRequired($this->translator->translate('Akce_musí_být_vybrána'))
            ->setHtmlAttribute('data-placeholder', $this->translator->translate('Zvolte_akci'))
            ->setHtmlAttribute('placeholder', $this->translator->translate('Akce'));

        $form->addSubmit('send', $this->translator->translate('Proveď'))
            ->setHtmlAttribute('title', $this->translator->translate('Provede_vybranou_akci_s_označenými_záznamy'))
            ->setHtmlAttribute('class', 'btn btn-primary');

        $form->onSuccess[] = array($this, 'SubmitGroupActionSubmitted');
        return $form;
    }

    public function SubmitGroupActionSubmitted(Form $form)
    {
        $data = $form->values;
        if ($form['send']->isSubmittedBy()) {
            $mySection = $this->session->getSection($this->name . '_checked_records');
            $totalR = count($mySection['checked']);
            $mySectionChecked = $mySection['checked'];
            //$this->session->close();
            if ($totalR > 0) {
                $this->groupActionsMethod($data, $mySectionChecked, $totalR);
                $this->UserManager->resetProgressBar($this->user->getId());
            } else {
                $this->flashMessage($this->translator->translate('Nevybrali_jste_žádné_záznamy'), 'error');
            }
        }

        $this->redrawControl('content');
    }

    public function groupActionsMethod($data, $checked, $totalR)
    {
        $counterR = 1;
        $mySection = $this->session->getSection($this->name . '_checked_records');
        $mySection['checked'] = [];
        $mySection['notchecked'] = [];
        //$this->session->close();
        //bdump($checked);
        //die;
        krsort($checked);
        if ($data['action'] == 'erase') {
            try {
                session_write_close();
                foreach ($checked as $key => $one) {
                    $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_mazání') . ' <br>' . $counterR . ' / ' . $totalR);
                    $this->mainDelete($one);
                    //$this->DataManager->delete($one);
                    $counterR++;
                }
                $this->flashMessage($this->translator->translate('Vybrané_záznamy_byly_vymazány'), 'success');
                $this->UserManager->resetProgressBar($this->user->getId());
            } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_mazání'), 'error');
                Debugger::log('GroupErase . ' . $e->getMessage(), 'groupActions');
            }
        } elseif ($data['action'] == 'pdf') {
            $arrFiles = [];
            try {
                session_write_close();
                foreach ($checked as $key => $one) {
                    $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_mazání') . ' <br>' . $counterR . ' / ' . $totalR);
                    $fileName = $this->handleSavePDF($one, NULL, array(), TRUE, FALSE);
                    $arrFiles[] = $fileName;
                    $counterR++;
                }
                $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_příprava_zip_souboru') . ' <br>' . $counterR . ' / ' . $totalR);
                $zipFile = $this->makezip($arrFiles);
                $onePDF = $this->makeOnePDF($arrFiles);

                $this->UserManager->resetProgressBar($this->user->getId());
                $this->downloadfile = $zipFile;
                $this->downloadfilePDF = $onePDF;
                $this->template->downloadfile = $zipFile;
                $this->template->downloadfilePDF = $onePDF;
                $this->showModal('downloadDocModal');
                $this->redrawControl('bscAreaEdit');
                $this->redrawControl('createDocs');

            } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_generování_souborů_a_jejich_kompresi'), 'error');
                Debugger::log('GroupPDF . ' . $e->getMessage(), 'groupActions');
            }
        } elseif ($data['action'] == 'lock') {
            try {
                session_write_close();
                foreach ($checked as $key => $one) {
                    $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_zamykání') . ' <br>' . $counterR . ' / ' . $totalR);
                    $this->DataManager->lock($one);
                    $counterR++;
                }
                $this->flashMessage($this->translator->translate('Vybrané_záznamy_byly_zamknuty'), 'success');
                $this->UserManager->resetProgressBar($this->user->getId());
            } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_zamykání'), 'error');
                Debugger::log('GroupErase . ' . $e->getMessage(), 'groupActions');
            }
        } elseif ($data['action'] == 'unlock') {
            try {
                session_write_close();
                foreach ($checked as $key => $one) {
                    $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_odemykání') . ' <br>' . $counterR . ' / ' . $totalR);
                    $this->DataManager->unlock($one);
                    $counterR++;
                }
                $this->flashMessage($this->translator->translate('Vybrané_záznamy_byly_odemknuty'), 'success');
                $this->UserManager->resetProgressBar($this->user->getId());
            } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_odemykání'), 'error');
                Debugger::log('GroupErase . ' . $e->getMessage(), 'groupActions');
            }
        } elseif ($data['action'] == 'payment') {
            try {
                session_write_close();
                foreach ($checked as $key => $one) {
                    $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_úhrada') . ' <br>' . $counterR . ' / ' . $totalR);
                    $retArr = $this->DataManager->makePayment($one);
                    if (self::hasError($retArr)) {
                        $this->flashmessage($this->translator->translate($retArr['error']) . ' ' . $retArr['inv_number'], 'error');
                    }
                    $counterR++;
                }
                $this->flashMessage($this->translator->translate('Vybrané_faktury_byly_uhrazeny'), 'success');
                $this->UserManager->resetProgressBar($this->user->getId());
            } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_hromadné_úhradě'), 'error');
                Debugger::log('GroupErase . ' . $e->getMessage(), 'groupActions');
            }
        } elseif (substr($data['action'],0,7) == 'status_') {
            //10.08.2022 - change status
            try{
                    $newStatusId = substr($data['action'],7);
                session_write_close();
                    foreach ($checked as $key => $one) {
                        $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Změna_stavu') . ' <br>' . $counterR . ' / ' . $totalR);
                        $retArr = $this->DataManager->changeStatus($one, $newStatusId);
                        $counterR++;
                    }
                } catch (\Exception $e) {
                $this->flashMessage($this->translator->translate('Chyba_při_zamykání'), 'error');
                Debugger::log('GroupStatus . ' . $e->getMessage(), 'groupActions');
            }
            $this->flashMessage($this->translator->translate('Stav_vybraných_dokladů_byl_změněn'), 'success');
            $this->UserManager->resetProgressBar($this->user->getId());

        }


    }

    /*** make emails with invoice / advance reminds
     * @param $data
     * @param $checked
     * @param $totalR
     * @param $caller
     * @return void
     */
    public function groupActionReminder($data, $checked, $totalR, $caller)
    {
        $counterR = 0;
        $counterTotal = 0;
        $errorCM = '';
        try {
            //   session_write_close();
            $tmpPartners = $this->DataManager->findAll()->where('id IN ? AND price_payed < price_e2_vat AND pay_date IS NULL', $checked)->select('DISTINCT cl_partners_book_id');
            foreach ($tmpPartners as $keyP => $oneP) {
                $this->UserManager->setProgressBar($counterR++, $totalR, $this->user->getId(), $this->translator->translate('Probíhá_odesílání_upomínek') . ' <br>' . $counterR . ' / ' . $totalR);

                //if ($tmpInvoice = $this->DataManager->find($one)) {
                $tmpInvoice = $this->DataManager->findAll()->where('id IN ? AND cl_partners_book_id = ? AND price_payed < price_e2_vat AND pay_date IS NULL', $checked, $oneP['cl_partners_book_id'])->fetch();
                if ($tmpInvoice) {
                    //17.07.2022 - prepare invoice data
                    $arrSum = [];
                    $tmpInvPartner = $this->DataManager->findAll()->where('cl_partners_book_id = ? AND id IN ? AND price_payed < price_e2_vat AND pay_date IS NULL', $oneP['cl_partners_book_id'], $checked);
                    $strInvPartner = '<table><tr><th style="text-align: right">Dlužná částka</th>
                                                    <th style="text-align: right">V. symb.</th>
                                                    <th style="text-align: center">Dat. splatnosti</th>
                                                    <th style="text-align: center">Dní po splat.</th>
                                                    <th style="text-align: center">Počet upomínek</th> 
                                                    <th style="text-align: left">Účet k úhradě<br>IBAN</th></tr>';
                    foreach($tmpInvPartner as $keyI => $oneI){
                        $strInvPartner .= '<tr>';
                        $strInvPartner .= '<td style="text-align: right">' . number_format(($oneI['price_e2_vat'] - $oneI['price_payed']),2,"."," ") . ' ' . $oneI->cl_currencies['currency_code'] . '</td>';
                        $strInvPartner .= '<td style="text-align: right">' . $oneI['var_symb']. '</td>';
                        $strInvPartner .= '<td  style="text-align: center">' . $oneI['due_date']->format('d.m.Y') . '</td>';
                        $tmpNow = new DateTime();
                        $difDays = $oneI['due_date']->diff($tmpNow);
                        $strInvPartner .= '<td style="text-align: center">' . $difDays->format('%a') . '</td>';
                        $strInvPartner .= '<td style="text-align: center">' . $oneI->reminder_count . '</td>';
                        $strInvPartner .= '<td style="text-align: left">' . $oneI->cl_bank_accounts['account_number'] . '/' . $oneI->cl_bank_accounts['bank_code'] . '<br>' . $oneI->cl_bank_accounts['iban_code'] . '</td>';
                        $strInvPartner .= '</tr>';
                        $arrSum[$oneI->cl_currencies['currency_code']] += $oneI['price_e2_vat'] - $oneI['price_payed'];
                    }
                    $strInvPartner .= '</table>';

                    $arrInvPartner['invoices'] = $strInvPartner;
                    $totalSum = '<table>';
                    foreach($arrSum as $keyS => $oneS){
                        if ($keyS != '')
                            $totalSum .= '<tr><td>'. number_format($oneS, 2, ".", " ") . ' ' . $keyS . '</td></tr>';
                    }
                    $totalSum .= '</table>';
                    $arrInvPartner['total_sum'] = $totalSum;
                    bdump($arrInvPartner);

                    $dataEml = [];
                    //12.1. emailToWorkers - available emails from cl_partners_book_workers
                    if (isset($data['cl_partners_branch_id']) && !is_null($data['cl_partners_branch_id'])) {
                        $tmpEmailToWorkers = $this->PartnersManager->findAll()->select(':cl_partners_book_workers.*')->
                        where('cl_partners_book.id = ? AND :cl_partners_book_workers.use_' . $this->mainTableName . ' = ? AND 
                                        (cl_partners_branch_id = ? OR cl_partners_branch_id IS NULL)', $tmpInvoice->cl_partners_book_id, 1, $tmpInvoice['cl_partners_branch_id'])->
                        fetchPairs('worker_name', 'worker_email');
                    } else {
                        $tmpEmailToWorkers = $this->PartnersManager->findAll()->select(':cl_partners_book_workers.*')->
                        where('cl_partners_book.id = ? AND :cl_partners_book_workers.use_' . $this->mainTableName . ' = ?', $tmpInvoice->cl_partners_book_id, 1)->
                        fetchPairs('worker_name', 'worker_email');
                    }
                    if (count($tmpEmailToWorkers) == 0) {
                        if (!is_null($tmpInvoice->cl_partners_book) && !empty($tmpInvoice->cl_partners_book['email'])) {
                            $tmpName = (!empty($tmpInvoice->cl_partners_book['person'])) ? $tmpInvoice->cl_partners_book['person'] : $tmpInvoice->cl_partners_book['company'];
                            $tmpEml = $this->validateEmail($tmpInvoice->cl_partners_book['email']);
                            if ($tmpEml == '')
                                $tmpEmailToWorkers = [$tmpName => $tmpEml];
                        }
                    }
                    //single emailTo which is set on sending doc
                    //            $tmpEmail = $this->validateEmail($one);
                    if (isset($tmpInvoice['cl_partners_book_workers_id']) && !is_null($tmpInvoice['cl_partners_book_workers_id'])) {
                        if ($tmpInvoice->cl_partners_book_workers['use_' . $this->mainTableName] == 1 && $this->validateEmail($data->cl_partners_book_workers->worker_email) != '') {
                            $tmpEmailTo = $tmpInvoice->cl_partners_book_workers->worker_name . ' <' . $tmpInvoice->cl_partners_book_workers->worker_email . '>';
                            //04.09.2020 - remove duplicate emails
                            $isWrk = array_search($tmpInvoice->cl_partners_book_workers->worker_email, $tmpEmailToWorkers);
                            if ($isWrk)
                                unset($tmpEmailToWorkers[$isWrk]);

                        } else {
                            $tmpEmailTo = "";
                        }
                    } else {
                        //24.05.2019 - test if is available record id cl_partners_book
                        if (!is_null($tmpInvoice->cl_partners_book_id)) {
                            $tmpEmail = str_replace(';', ',', $tmpInvoice->cl_partners_book->email);
                            $tmpArrEmail = str_getcsv($tmpEmail, ',');
                            $tmpEmailTo = "";
                            foreach ($tmpArrEmail as $one) {
                                if ($one != '' && $this->validateEmail($one) != '') {
                                    if ($tmpEmailTo != '') {
                                        $tmpEmailTo .= ';';
                                    }
                                    $tmpEmailTo .= $tmpInvoice->cl_partners_book->company . ' <' . $one . '>';
                                }
                                //04.09.2020 - remove duplicate emails
                                $isWrk = array_search($one, $tmpEmailToWorkers);
                                if ($isWrk)
                                    unset($tmpEmailToWorkers[$isWrk]);
                            }
                        } else {
                            $tmpEmailTo = "";
                        }
                    }
                    //07.04.2021 - move first worker into emailto if there is no emailTo
                    if (empty($tmpEmailTo) && count($tmpEmailToWorkers) > 0) {
                        foreach ($tmpEmailToWorkers as $keyEm => $oneEm) {
                            $tmpEmailTo = $keyEm . ' <' . $oneEm . '>';
                            unset($tmpEmailToWorkers[$keyEm]);
                            break;
                        }
                    }
                    $dataEml['singleEmailTo'] = $tmpEmailTo;
                    $dataEml['singleEmailFrom'] = $this->settings->name . ' <' . $this->settings->email . '>';
                    if ($this->settings['smtp_email_global'] == 1)
                    {
                        $emailFrom = $this->validateEmail($this->settings['smtp_username']);
                        if (!empty($emailFrom)){
                            $dataEml['singleEmailFrom'] = $this->settings['name'] . ' <' . $emailFrom . '>';
                        }
                    }

                    $tmpEmlText = $this->EmailingTextManager->getEmailingText($caller, null, $arrInvPartner, NULL);
                    $dataEml['subject'] = $tmpEmlText['subject'];
                    $template = $this->createTemplate()->setFile(__DIR__.'/../templates/Emailing/email.latte');
                    $template->body = $tmpEmlText['body'];

                    $dataEml['body'] = $template;
                    $dataEml['to_send'] = 1;
                    $this->EmailingManager->insert($dataEml);

                    $tmpInvPartner = $this->DataManager->findAll()->where('cl_partners_book_id = ? AND id IN ? AND price_payed < price_e2_vat AND pay_date IS NULL', $oneP['cl_partners_book_id'], $checked);
                    foreach($tmpInvPartner as $keyIP => $oneIP){
                        $oneIP->update(['reminder_count' => $oneIP['reminder_count'] + 1]);
                    }
                }
                $counterTotal++;
            }
            $this->UserManager->resetProgressBar($this->user->getId());
            if ($counterTotal > 0) {
                $this->flashMessage($this->translator->translate('Všechny_požadované_upomínky_byly_odeslány') . ': ' . $counterTotal, 'success');
            }
        } catch (\Exception $e) {
            $this->flashMessage($this->translator->translate('Chyba_při_vytváření_upomínek'), 'error');
            Debugger::log('Group ' . $caller . ' Reminder . ' . $e->getMessage());
        }
    }

    private function makezip($arrFiles)
    {
        // Initialize archive object
        $zip = new \ZipArchive();
        $dataFolder = $this->CompaniesManager->getDataFolder($this->settings->id);
        //$subFolder = $this->ArraysManager->getSubFolder('log');
        if ($this->formName != '') {
            $zipFile = $dataFolder . '/' . $this->formName . '.zip';
        } else {
            $zipFile = $dataFolder . '/pdf-documents.zip';
        }

        $zip->open($zipFile, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

        foreach ($arrFiles as $key => $one) {
            // Add current file to archive
            //bdump($one);
            $zip->addFile($one, basename($one));
        }

        // Zip archive will be created only after closing object
        $zip->close();
        return ($zipFile);
    }

    private function makeOnePDF($arrFiles)
    {
        //$Mfiles = array();
        //Multiple pdf store in Mfiles array with full path.
        //array_push($Mfiles,'/assets/'.$pdfname.'.pdf');
        $Mfiles = $arrFiles;

        //$Mpath = 'Give file path with have you need to merge all pdf';
        $dataFolder = $this->CompaniesManager->getDataFolder($this->settings->id);
        //$subFolder = $this->ArraysManager->getSubFolder('log');
        if ($this->formName != '') {
            $Mpath = $dataFolder . '/' . $this->formName . '.pdf';
        } else {
            $Mpath = $dataFolder . '/pdf-documents.pdf';
        }

        $pdf = new \PdfResponse\PdfResponse('../templates/pdf.latte');

        // after loop we start this code
        if($Mfiles)
        {
            $filesTotal = sizeof($Mfiles);
            $fileNumber = 1;

            if (!file_exists($Mpath))
            {
                $handle = fopen($Mpath, 'w');
                fclose($handle);
            }
            foreach ($Mfiles as $fileName)
            {
                if (file_exists($fileName))
                {
                    $pagesInFile = $pdf->mPDF->SetSourceFile($fileName);
                    for ($i = 1; $i <= $pagesInFile; $i++)
                    {
                        $tplId = $pdf->mPDF->importPage($i);
                        $pdf->mPDF->UseTemplate($tplId);
                        if (($fileNumber < $filesTotal) || ($i != $pagesInFile))
                        {
                            $pdf->mPDF->WriteHTML('<pagebreak />');
                        }
                    }
                }
                $fileNumber++;
            }
            $pdf->mPDF->Output($Mpath);
        }
        return ($Mpath);
    }



    public function handleGetDownFile()
    {
        $dataFolder = $this->CompaniesManager->getDataFolder($this->settings->id);
        if ($this->formName != '') {
            $zipFileName = $this->formName . '.zip';
        } else {
            $zipFileName = '/pdf-documents.zip';
        }
        $zipFile = $dataFolder . '/' . $zipFileName;
        $this->sendResponse(new \Nette\Application\Responses\FileResponse($zipFile, $zipFileName, 'application/zip'));
    }

    public function handleGetDownPDF()
    {
        $dataFolder = $this->CompaniesManager->getDataFolder($this->settings->id);
        if ($this->formName != '') {
            $pdfFileName = $this->formName . '.pdf';
        } else {
            $pdfFileName = '/pdf-documents.pdf';
        }
        $pdfFile = $dataFolder . '/' . $pdfFileName;
        $this->sendResponse(new \Nette\Application\Responses\FileResponse($pdfFile, $pdfFileName, 'application/pdf'));
    }

    public function handleShowPreview($valueId)
    {
        $this->showPreviewDoc = TRUE;
        $this->id = $valueId;
        $this->bscId = $valueId;
        $this->template->showPreviewDoc = TRUE;
        $this->template->previewDocId = $valueId;
        $this->redrawControl('baselistArea');
        $this->redrawControl('baselist');
        $this->redrawControl('showPreviewDoc');
    }



}